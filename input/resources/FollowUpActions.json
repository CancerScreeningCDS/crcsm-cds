{
  "resourceType": "Library",
  "id": "FollowUpActions",
  "contained": [ {
    "resourceType": "Parameters",
    "id": "options",
    "parameter": [ {
      "name": "translatorVersion",
      "valueString": "3.11.0"
    }, {
      "name": "option",
      "valueString": "EnableAnnotations"
    }, {
      "name": "option",
      "valueString": "EnableLocators"
    }, {
      "name": "option",
      "valueString": "DisableListDemotion"
    }, {
      "name": "option",
      "valueString": "DisableListPromotion"
    }, {
      "name": "format",
      "valueString": "JSON"
    }, {
      "name": "format",
      "valueString": "XML"
    }, {
      "name": "analyzeDataRequirements",
      "valueBoolean": true
    }, {
      "name": "collapseDataRequirements",
      "valueBoolean": true
    }, {
      "name": "compatibilityLevel",
      "valueString": "1.5"
    }, {
      "name": "enableCqlOnly",
      "valueBoolean": false
    }, {
      "name": "errorLevel",
      "valueString": "Error"
    }, {
      "name": "signatureLevel",
      "valueString": "Overloads"
    }, {
      "name": "validateUnits",
      "valueBoolean": false
    }, {
      "name": "verifyOnly",
      "valueBoolean": true
    } ]
  } ],
  "extension": [ {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-cqlOptions",
    "valueReference": {
      "reference": "#options"
    }
  }, {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://cancerscreeningcds.github.io/crcsm-cds/Library/FollowUpActions",
  "version": "1.0.0",
  "name": "FollowUpActions",
  "type": {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/library-type",
      "code": "logic-library"
    } ]
  },
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://cancerscreeningcds.github.io/crcsm-cds/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library DataElements",
    "resource": "http://cancerscreeningcds.github.io/crcsm-cds/Library/DataElements|1.0.0"
  }, {
    "type": "depends-on",
    "display": "Library CRCSMCommonFunctions",
    "resource": "http://cancerscreeningcds.github.io/crcsm-cds/Library/CRCSMCommonFunctions|1.0.0"
  }, {
    "type": "depends-on",
    "display": "Library Common",
    "resource": "http://cancerscreeningcds.github.io/crcsm-cds/Library/CSMCommonFunctions|1.0.0"
  }, {
    "type": "depends-on",
    "display": "Library C3F",
    "resource": "http://cancerscreeningcds.github.io/crcsm-cds/Library/CDSConnectCommonsforFHIRv401|1.0.0"
  }, {
    "type": "depends-on",
    "display": "Code system ActCode",
    "resource": "http://cancerscreeningcds.github.io/crcsm-cds/CodeSystem/plan-definition-action-code-system"
  }, {
    "type": "depends-on",
    "display": "Code system ReasonCode",
    "resource": "http://cancerscreeningcds.github.io/crcsm-cds/CodeSystem/plan-definition-action-reason-code-system"
  }, {
    "type": "depends-on",
    "display": "Code system SNOMED-CT",
    "resource": "http://snomed.info/sct"
  }, {
    "type": "depends-on",
    "display": "Code system LOINC",
    "resource": "http://loinc.org"
  }, {
    "type": "depends-on",
    "display": "Code system ColonoscopyResultCS",
    "resource": "http://cancerscreeningcds.github.io/crcsm-cds/CodeSystem/colonoscopy-result-observation-code-system"
  }, {
    "type": "depends-on",
    "display": "Value set Fecal Occult Blood Test",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.198.11.1020"
  }, {
    "type": "depends-on",
    "display": "Value set Stool DNA-FIT",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.108.11.1145"
  }, {
    "type": "depends-on",
    "display": "Value set Colonoscopy Study",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1032.356"
  }, {
    "type": "depends-on",
    "display": "Value set Flexible Sigmoidoscopy Study",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1032.359"
  }, {
    "type": "depends-on",
    "display": "Value set CT Colonography Study",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.464.1003.118.11.1097"
  } ],
  "parameter": [ {
    "name": "ScreeningHistoryLookback",
    "use": "in",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "act-repeatScreening",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Resource"
  }, {
    "name": "act-FollowUpColonoscopy",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Resource"
  }, {
    "name": "act-oncologyReferral",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Resource"
  }, {
    "name": "act-followUpColonoscopist",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Resource"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "DiagnosticReport",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/DiagnosticReport" ],
    "mustSupport": [ "code", "status", "status.value", "effective", "effective.value", "reference" ],
    "codeFilter": [ {
      "path": "code"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "id", "basedOn", "value", "status", "status.value", "effective", "effective.value", "issued", "issued.value" ],
    "codeFilter": [ {
      "path": "code"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "id", "basedOn", "value", "status", "status.value", "effective", "effective.value", "issued", "issued.value" ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "bGlicmFyeSBGb2xsb3dVcEFjdGlvbnMgdmVyc2lvbiAnMS4wLjAnCgp1c2luZyBGSElSIHZlcnNpb24gJzQuMC4xJwppbmNsdWRlIEZISVJIZWxwZXJzICB2ZXJzaW9uICc0LjAuMScgY2FsbGVkIEZISVJIZWxwZXJzCmluY2x1ZGUgRGF0YUVsZW1lbnRzIHZlcnNpb24gJzEuMC4wJyBjYWxsZWQgRGF0YUVsZW1lbnRzCmluY2x1ZGUgQ1JDU01Db21tb25GdW5jdGlvbnMgdmVyc2lvbiAnMS4wLjAnIGNhbGxlZCBDUkNTTUNvbW1vbkZ1bmN0aW9ucwoKY29kZXN5c3RlbSAiQWN0Q29kZSI6ICdodHRwOi8vY2FuY2Vyc2NyZWVuaW5nY2RzLmdpdGh1Yi5pby9jcmNzbS1jZHMvQ29kZVN5c3RlbS9wbGFuLWRlZmluaXRpb24tYWN0aW9uLWNvZGUtc3lzdGVtJwpjb2Rlc3lzdGVtICJSZWFzb25Db2RlIjogJ2h0dHA6Ly9jYW5jZXJzY3JlZW5pbmdjZHMuZ2l0aHViLmlvL2NyY3NtLWNkcy9Db2RlU3lzdGVtL3BsYW4tZGVmaW5pdGlvbi1hY3Rpb24tcmVhc29uLWNvZGUtc3lzdGVtJwpjb2Rlc3lzdGVtICJTTk9NRUQtQ1QiOiAnaHR0cDovL3Nub21lZC5pbmZvL3NjdCcKY29kZXN5c3RlbSAiTE9JTkMiOiAnaHR0cDovL2xvaW5jLm9yZycKY29kZXN5c3RlbSAiQ29sb25vc2NvcHlSZXN1bHRDUyI6ICdodHRwOi8vY2FuY2Vyc2NyZWVuaW5nY2RzLmdpdGh1Yi5pby9jcmNzbS1jZHMvQ29kZVN5c3RlbS9jb2xvbm9zY29weS1yZXN1bHQtb2JzZXJ2YXRpb24tY29kZS1zeXN0ZW0nCgovLyBBY3QgQ29kZXMKLy9jb2RlICJDb250aW51ZSByb3V0aW5lIHNjcmVlbmluZyI6ICdjb250aW51ZXJvdXRpbmVzY3JlZW5pbmcnIGZyb20gIkFjdENvZGUiIGRpc3BsYXkgJ0NvbnRpbnVlIHJvdXRpbmUgc2NyZWVuaW5nJwovL2NvZGUgIkNvbnRpbnVlIHJvdXRpbmUgc2NyZWVuaW5nIGlmIGhpZ2gtcXVhbGl0eSB0ZXN0IjogJ2NvbnRpbnVlcm91dGluZXNjcmVlbmluZ2hpZ2hxdWFsaXR5dGVzdCcgZnJvbSAiQWN0Q29kZSIgZGlzcGxheSAnQ29udGludWUgcm91dGluZSBzY3JlZW5pbmcgaWYgaGlnaC1xdWFsaXR5IHRlc3QnCi8vY29kZSAiUmVwZWF0IHNjcmVlbmluZyI6ICdyZXBlYXRzY3JlZW5pbmcnIGZyb20gIkFjdENvZGUiIGRpc3BsYXkgJ1JlcGVhdCBzY3JlZW5pbmcnCmNvZGUgIkNvbG9yZWN0YWwgQ2FuY2VyIFNjcmVlbmluZyI6ICcyNjg1NDgwMDMnIGZyb20gIlNOT01FRC1DVCIgZGlzcGxheSAnU2NyZWVuaW5nIGZvciBtYWxpZ25hbnQgbmVvcGxhc20gb2YgbGFyZ2UgaW50ZXN0aW5lIChwcm9jZWR1cmUpJwovL2NvZGUgIk9yZGVyIGZvbGxvdy11cCBjb2xvbm9zY29weSI6ICdvcmRlcmZvbGxvd3VwY29sb25vc2NvcHknIGZyb20gIkFjdENvZGUiIGRpc3BsYXkgJ09yZGVyIGZvbGxvdy11cCBjb2xvbm9zY29weScKY29kZSAiQ29sb25vc2NvcHkiOiAnMTg3NDYtOCcgZnJvbSAiTE9JTkMiIGRpc3BsYXkgJ0NvbG9ub3Njb3B5IHN0dWR5Jwpjb2RlICJGb2xsb3ctdXAgZW5kb3Njb3Bpc3QgcmVjb21tZW5kYXRpb25zIjogJ2VuZG9zY29waXN0cmVjcycgZnJvbSAiQWN0Q29kZSIgZGlzcGxheSAnRm9sbG93LXVwIHdpdGggZW5kb3Njb3Bpc3QgZm9yIHJlY29tbWVuZGF0aW9ucycKY29kZSAiT25jb2xvZ2ljIHJlZmVycmFsIjogJ29uY3JlZmVycmFsJyBmcm9tICAiQWN0Q29kZSIgZGlzcGxheSAnT25jb2xvZ2ljIHJlZmVycmFsJwoKLy8gUmVhc29uIENvZGVzCmNvZGUgIlNjcmVlbmluZyBuZWdhdGl2ZSI6ICduZWdhdGl2ZXNjcmVlbmluZycgZnJvbSAiUmVhc29uQ29kZSIgZGlzcGxheSAnTm9uLWNvbG9ub3Njb3B5IGNvbG9yZWN0YWwgY2FuY2VyIHNjcmVlbmluZyBuZWdhdGl2ZScKY29kZSAiSW5jb25jbHVzaXZlIG5vbi1jb2xvbm9zY29weSB0ZXN0IHJlc3VsdCI6ICdpbmNvbmNsdXNpdmVzY3JlZW5pbmcnIGZyb20gIlJlYXNvbkNvZGUiIGRpc3BsYXkgJ0luY29uY2x1c2l2ZSBub24tY29sb25vc2NvcHkgc2NyZWVuaW5nJwpjb2RlICJQb3NpdGl2ZSBvciBhYm5vcm1hbCBub25jb2xvbm9zY29weSB0ZXN0IjogJ3Bvc2l0aXZlYWJub3JtYWxzY3JlZW5pbmcnIGZyb20gIlJlYXNvbkNvZGUiIGRpc3BsYXkgJ1Bvc2l0aXZlIG9yIGFibm9ybWFsIG5vbi1jb2xvbm9zY29weSBzY3JlZW5pbmcnCmNvZGUgIk5lZ2F0aXZlIG9yIG5vcm1hbCBub24tY29sb25vc2NvcHkgdGVzdCB3aXRoIGhpZ2gtcXVhbGl0eSBleGFtIjogJ25lZ2F0aXZlaGlnaHF1YWxpdHlzY3JlZW5pbmcnIGZyb20gIlJlYXNvbkNvZGUiIGRpc3BsYXkgJ05lZ2F0aXZlIG9yIG5vcm1hbCBub24tY29sb25vc2NvcHkgdGVzdCB3aXRoIGhpZ2gtcXVhbGl0eSBleGFtJwpjb2RlICJDb2xvcmVjdGFsIGNhbmNlciBmaW5kaW5nIjogJ2NyY2ZpbmRpbmcnIGZyb20gQ29sb25vc2NvcHlSZXN1bHRDUyBkaXNwbGF5ICdDb2xvcmVjdGFsIGNhbmNlciBmaW5kaW5nJwpjb2RlICJNaXNzaW5nIGVuZG9zY29waXN0IHJlY29tbWVuZGF0aW9uIjogJ21pc3NpbmdyZWMnIGZyb20gQ29sb25vc2NvcHlSZXN1bHRDUyBkaXNwbGF5ICdNaXNzaW5nIGVuZG9zY29waXN0IHJlY29tbWVuZGF0aW9uIGZvciBwb3RlbnRpYWxseSBwcmVjYW5jZXJvdXMgcG9seXAgZmluZGluZycKCmNvbnRleHQgUGF0aWVudAoKZGVmaW5lICJhY3QtcmVwZWF0U2NyZWVuaW5nIjoKICBDUkNTTUNvbW1vbkZ1bmN0aW9ucy5TZXRGb2xsb3d1cFJlY29tbWVuZGF0aW9uKAogICAgIkNvbG9yZWN0YWwgQ2FuY2VyIFNjcmVlbmluZyIsIAogICAgIkluY29uY2x1c2l2ZSBub24tY29sb25vc2NvcHkgdGVzdCByZXN1bHQiLCAKICAgIENSQ1NNQ29tbW9uRnVuY3Rpb25zLlNvdXJjZURvY3VtZW50YXRpb25PdGhlciwgCiAgICBEYXRhRWxlbWVudHMuTW9zdFJlY2VudENvbG9yZWN0YWxTY3JlZW5pbmdEYXRlICkgICAKCmRlZmluZSAiYWN0LUZvbGxvd1VwQ29sb25vc2NvcHkiOgogIENSQ1NNQ29tbW9uRnVuY3Rpb25zLlNldEZvbGxvd3VwUmVjb21tZW5kYXRpb24oCiAgICAiQ29sb25vc2NvcHkiLCAKICAgICJQb3NpdGl2ZSBvciBhYm5vcm1hbCBub25jb2xvbm9zY29weSB0ZXN0IiwgCiAgICBDUkNTTUNvbW1vbkZ1bmN0aW9ucy5Tb3VyY2VEb2N1bWVudGF0aW9uVVNQU1RGLCAKICAgIERhdGFFbGVtZW50cy5Nb3N0UmVjZW50Q29sb3JlY3RhbFNjcmVlbmluZ0RhdGUgKSAgIAoKZGVmaW5lICJhY3Qtb25jb2xvZ3lSZWZlcnJhbCI6CiAgQ1JDU01Db21tb25GdW5jdGlvbnMuU2V0Rm9sbG93dXBSZWNvbW1lbmRhdGlvbigKICAgICJPbmNvbG9naWMgcmVmZXJyYWwiLCAKICAgICJDb2xvcmVjdGFsIGNhbmNlciBmaW5kaW5nIiwgCiAgICBDUkNTTUNvbW1vbkZ1bmN0aW9ucy5Tb3VyY2VEb2N1bWVudGF0aW9uT3RoZXIsIAogICAgRGF0YUVsZW1lbnRzLk1vc3RSZWNlbnRDb2xvcmVjdGFsU2NyZWVuaW5nRGF0ZSApICAgIAoKZGVmaW5lICJhY3QtZm9sbG93VXBDb2xvbm9zY29waXN0IjoKICBDUkNTTUNvbW1vbkZ1bmN0aW9ucy5TZXRGb2xsb3d1cFJlY29tbWVuZGF0aW9uKAogICAgIkZvbGxvdy11cCBlbmRvc2NvcGlzdCByZWNvbW1lbmRhdGlvbnMiLCAKICAgICJNaXNzaW5nIGVuZG9zY29waXN0IHJlY29tbWVuZGF0aW9uIiwgCiAgICBDUkNTTUNvbW1vbkZ1bmN0aW9ucy5Tb3VyY2VEb2N1bWVudGF0aW9uT3RoZXIsIAogICAgRGF0YUVsZW1lbnRzLk1vc3RSZWNlbnRDb2xvcmVjdGFsU2NyZWVuaW5nRGF0ZSApICAgIA=="
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}