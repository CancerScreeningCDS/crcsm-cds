<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="urn:hl7-org:elm:r1" xmlns:t="urn:hl7-org:elm-types:r1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:fhir="http://hl7.org/fhir" xmlns:qdm43="urn:healthit-gov:qdm:v4_3" xmlns:qdm53="urn:healthit-gov:qdm:v5_3" xmlns:a="urn:hl7-org:cql-annotations:r1" localId="0">
   <annotation translatorVersion="3.11.0" translatorOptions="EnableAnnotations,EnableLocators,DisableListDemotion,DisableListPromotion" signatureLevel="Overloads" xsi:type="a:CqlToElmInfo"/>
   <annotation xsi:type="a:Annotation">
      <a:s r="1798">
         <a:s>library CRCSMCommonFunctions version '1.0.0'</a:s>
      </a:s>
   </annotation>
   <identifier id="CRCSMCommonFunctions" system="http://cancerscreeningcds.github.io/crcsm-cds" version="1.0.0"/>
   <schemaIdentifier id="urn:hl7-org:elm" version="r1"/>
   <usings>
      <def localId="1" localIdentifier="System" uri="urn:hl7-org:elm-types:r1"/>
      <def localId="206" locator="3:1-3:26" localIdentifier="FHIR" uri="http://hl7.org/fhir" version="4.0.1">
         <annotation xsi:type="a:Annotation">
            <a:s r="206">
               <a:s>using </a:s>
               <a:s>
                  <a:s>FHIR</a:s>
               </a:s>
               <a:s> version '4.0.1'</a:s>
            </a:s>
         </annotation>
      </def>
   </usings>
   <includes>
      <def localId="207" locator="5:1-5:63" localIdentifier="C3F" path="http://cancerscreeningcds.github.io/crcsm-cds/CDSConnectCommonsforFHIRv401" version="1.0.0">
         <annotation xsi:type="a:Annotation">
            <a:s r="207">
               <a:s>include </a:s>
               <a:s>
                  <a:s>CDSConnectCommonsforFHIRv401</a:s>
               </a:s>
               <a:s> version '1.0.0' called C3F</a:s>
            </a:s>
         </annotation>
      </def>
      <def localId="208" locator="6:1-6:54" localIdentifier="FHIRHelpers" path="http://cancerscreeningcds.github.io/crcsm-cds/FHIRHelpers" version="4.0.1">
         <annotation xsi:type="a:Annotation">
            <a:s r="208">
               <a:s>include </a:s>
               <a:s>
                  <a:s>FHIRHelpers</a:s>
               </a:s>
               <a:s> version '4.0.1' called FHIRHelpers</a:s>
            </a:s>
         </annotation>
      </def>
      <def localId="209" locator="7:1-7:68" localIdentifier="CSMCommonFunctions" path="http://cancerscreeningcds.github.io/crcsm-cds/CSMCommonFunctions" version="1.0.0">
         <annotation xsi:type="a:Annotation">
            <a:s r="209">
               <a:s>include </a:s>
               <a:s>
                  <a:s>CSMCommonFunctions</a:s>
               </a:s>
               <a:s> version '1.0.0' called CSMCommonFunctions</a:s>
            </a:s>
         </annotation>
      </def>
   </includes>
   <parameters>
      <def localId="220" locator="19:1-19:59" name="OverdueDefault" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="220">
               <a:s>// TODO: move parameters to DataElements.cql
// TODO: check overdue default against TEP input
parameter &quot;OverdueDefault&quot; </a:s>
               <a:s r="222">
                  <a:s>System.Quantity</a:s>
               </a:s>
               <a:s> default </a:s>
               <a:s r="221">
                  <a:s>6 months</a:s>
               </a:s>
            </a:s>
         </annotation>
         <default localId="221" locator="19:52-19:59" value="6" unit="months" xsi:type="Quantity"/>
         <parameterTypeSpecifier localId="222" locator="19:28-19:42" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
      </def>
      <def localId="223" locator="20:1-20:55" name="DueDefault" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="223">
               <a:s>parameter &quot;DueDefault&quot; </a:s>
               <a:s r="225">
                  <a:s>System.Quantity</a:s>
               </a:s>
               <a:s> default </a:s>
               <a:s r="224">
                  <a:s>3 months</a:s>
               </a:s>
            </a:s>
         </annotation>
         <default localId="224" locator="20:48-20:55" value="3" unit="months" xsi:type="Quantity"/>
         <parameterTypeSpecifier localId="225" locator="20:24-20:38" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
      </def>
      <def localId="226" locator="21:1-21:59" name="OverdueFollowup" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="226">
               <a:s>parameter &quot;OverdueFollowup&quot; </a:s>
               <a:s r="228">
                  <a:s>System.Quantity</a:s>
               </a:s>
               <a:s> default </a:s>
               <a:s r="227">
                  <a:s>90 days</a:s>
               </a:s>
            </a:s>
         </annotation>
         <default localId="227" locator="21:53-21:59" value="90" unit="days" xsi:type="Quantity"/>
         <parameterTypeSpecifier localId="228" locator="21:29-21:43" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
      </def>
   </parameters>
   <codeSystems>
      <def localId="210" locator="9:1-9:113" name="FlagCode" id="http://cancerscreeningcds.github.io/crcsm-cds/CodeSystem/recommendation-flag-code-system" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="210">
               <a:s>codesystem &quot;FlagCode&quot;: 'http://cancerscreeningcds.github.io/crcsm-cds/CodeSystem/recommendation-flag-code-system'</a:s>
            </a:s>
         </annotation>
      </def>
      <def localId="217" locator="14:1-14:95" name="cpg-activity-type-cs" id="http://hl7.org/fhir/uv/cpg/CodeSystem/cpg-activity-type-cs" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="217">
               <a:s>codesystem &quot;cpg-activity-type-cs&quot;: 'http://hl7.org/fhir/uv/cpg/CodeSystem/cpg-activity-type-cs'</a:s>
            </a:s>
         </annotation>
      </def>
   </codeSystems>
   <codes>
      <def localId="211" locator="11:1-11:60" name="OVERDUE" id="overdue" display="Overdue" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="211">
               <a:s>code &quot;OVERDUE&quot; : 'overdue' from </a:s>
               <a:s r="212">
                  <a:s>&quot;FlagCode&quot;</a:s>
               </a:s>
               <a:s> display 'Overdue'</a:s>
            </a:s>
         </annotation>
         <codeSystem localId="212" locator="11:33-11:42" name="FlagCode"/>
      </def>
      <def localId="213" locator="12:1-12:48" name="DUE" id="due" display="Due" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="213">
               <a:s>code &quot;DUE&quot; : 'due' from </a:s>
               <a:s r="214">
                  <a:s>&quot;FlagCode&quot;</a:s>
               </a:s>
               <a:s> display 'Due'</a:s>
            </a:s>
         </annotation>
         <codeSystem localId="214" locator="12:25-12:34" name="FlagCode"/>
      </def>
      <def localId="215" locator="13:1-13:60" name="NOT DUE" id="not-due" display="Not due" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="215">
               <a:s>code &quot;NOT DUE&quot; : 'not-due' from </a:s>
               <a:s r="216">
                  <a:s>&quot;FlagCode&quot;</a:s>
               </a:s>
               <a:s> display 'Not due'</a:s>
            </a:s>
         </annotation>
         <codeSystem localId="216" locator="13:33-13:42" name="FlagCode"/>
      </def>
      <def localId="218" locator="15:1-15:104" name="Record an inference" id="record-inference" display="Record an inference" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="218">
               <a:s>code &quot;Record an inference&quot;: 'record-inference' from </a:s>
               <a:s r="219">
                  <a:s>&quot;cpg-activity-type-cs&quot;</a:s>
               </a:s>
               <a:s> display 'Record an inference'</a:s>
            </a:s>
         </annotation>
         <codeSystem localId="219" locator="15:53-15:74" name="cpg-activity-type-cs"/>
      </def>
   </codes>
   <contexts>
      <def localId="232" locator="23:1-23:15" name="Patient"/>
   </contexts>
   <statements>
      <def localId="230" locator="23:1-23:15" name="Patient" context="Patient">
         <expression localId="231" xsi:type="SingletonFrom">
            <operand localId="229" locator="23:1-23:15" dataType="fhir:Patient" templateId="http://hl7.org/fhir/StructureDefinition/Patient" xsi:type="Retrieve"/>
         </expression>
      </def>
      <def localId="234" locator="29:1-32:3" name="SourceDocumentationACS" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="234">
               <a:s>//------------------------------------------------------------------------------
// Recommendation model
//------------------------------------------------------------------------------

define SourceDocumentationACS:
  </a:s>
               <a:s r="235">
                  <a:s>{
    </a:s>
                  <a:s>
                     <a:s>label: </a:s>
                     <a:s r="236">
                        <a:s>'ACS'</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
  }</a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="235" locator="30:3-32:3" xsi:type="Tuple">
            <element name="label">
               <value localId="236" locator="31:12-31:16" valueType="t:String" value="ACS" xsi:type="Literal"/>
            </element>
         </expression>
      </def>
      <def localId="238" locator="34:1-37:3" name="SourceDocumentationUSPSTF" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="238">
               <a:s>define SourceDocumentationUSPSTF:
  </a:s>
               <a:s r="239">
                  <a:s>{
    </a:s>
                  <a:s>
                     <a:s>label: </a:s>
                     <a:s r="240">
                        <a:s>'USPSTF'</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
  }</a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="239" locator="35:3-37:3" xsi:type="Tuple">
            <element name="label">
               <value localId="240" locator="36:12-36:19" valueType="t:String" value="USPSTF" xsi:type="Literal"/>
            </element>
         </expression>
      </def>
      <def localId="242" locator="39:1-42:3" name="SourceDocumentationUSMSTF" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="242">
               <a:s>define SourceDocumentationUSMSTF:
  </a:s>
               <a:s r="243">
                  <a:s>{
    </a:s>
                  <a:s>
                     <a:s>label: </a:s>
                     <a:s r="244">
                        <a:s>'USMSTF'</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
  }</a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="243" locator="40:3-42:3" xsi:type="Tuple">
            <element name="label">
               <value localId="244" locator="41:12-41:19" valueType="t:String" value="USMSTF" xsi:type="Literal"/>
            </element>
         </expression>
      </def>
      <def localId="246" locator="44:1-47:3" name="SourceDocumentationOther" context="Patient" accessLevel="Public">
         <annotation xsi:type="a:Annotation">
            <a:s r="246">
               <a:s>define SourceDocumentationOther:
  </a:s>
               <a:s r="247">
                  <a:s>{
    </a:s>
                  <a:s>
                     <a:s>label: </a:s>
                     <a:s r="248">
                        <a:s>'Other'</a:s>
                     </a:s>
                  </a:s>
                  <a:s>
  }</a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="247" locator="45:3-47:3" xsi:type="Tuple">
            <element name="label">
               <value localId="248" locator="46:12-46:18" valueType="t:String" value="Other" xsi:type="Literal"/>
            </element>
         </expression>
      </def>
      <def localId="249" locator="51:1-86:3" name="SetRecommendation" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="249">
               <a:s>// TODO: do we really need event as a list in the output?
// TODO: add handling for when repeat is null
define function SetRecommendation(          
    code System.Code,
    reason System.Code,
    documentation Tuple{label System.String},
    timingAge Tuple{value Decimal, code String},
    event System.DateTime,
    repeat Tuple{frequency System.Integer,period System.Decimal,periodUnit System.String}) 
    returns Tuple {code System.Code,reason System.Code,documentation Tuple{label System.String},timingAge Tuple{value Decimal, code String},
      timingTiming Tuple{event List&lt;System.String>,repeat Tuple{boundsPeriod Tuple{start System.String},frequency System.Integer,period System.Decimal,periodUnit System.String}},
      flag System.Code
    }: 
  </a:s>
               <a:s r="707">
                  <a:s r="707">
                     <a:s>
                        <a:s r="308">
                           <a:s r="309">
                              <a:s>
                                 <a:s>code</a:s>
                              </a:s>
                           </a:s>
                           <a:s> C</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
  </a:s>
                     <a:s>
                        <a:s>let </a:s>
                        <a:s r="310">
                           <a:s>startDate: </a:s>
                           <a:s r="311">
                              <a:s>if </a:s>
                              <a:s r="314">
                                 <a:s r="312">
                                    <a:s>timingAge</a:s>
                                 </a:s>
                                 <a:s> is not null</a:s>
                              </a:s>
                              <a:s> then </a:s>
                              <a:s r="323">
                                 <a:s>CalculateStartDateByAge(</a:s>
                                 <a:s r="315">
                                    <a:s>timingAge</a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                              <a:s r="338"> else null</a:s>
                           </a:s>
                        </a:s>
                        <a:s>,
  </a:s>
                        <a:s r="340">
                           <a:s>nextdue: </a:s>
                           <a:s r="341">
                              <a:s>if </a:s>
                              <a:s r="344">
                                 <a:s r="342">
                                    <a:s>event</a:s>
                                 </a:s>
                                 <a:s> is not null</a:s>
                              </a:s>
                              <a:s> then </a:s>
                              <a:s r="345">
                                 <a:s>event</a:s>
                              </a:s>
                              <a:s> 
    else </a:s>
                              <a:s r="367">
                                 <a:s>CalculateNextDueByCodeAndInterval(</a:s>
                                 <a:s r="350">
                                    <a:s>ToConcept(</a:s>
                                    <a:s r="346">
                                       <a:s>C</a:s>
                                    </a:s>
                                    <a:s>)</a:s>
                                 </a:s>
                                 <a:s>, </a:s>
                                 <a:s r="352">
                                    <a:s>startDate</a:s>
                                 </a:s>
                                 <a:s>, </a:s>
                                 <a:s r="353">
                                    <a:s>repeat</a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s>,
  </a:s>
                        <a:s r="615">
                           <a:s>timingTiming: </a:s>
                           <a:s r="616">
                              <a:s>{
      </a:s>
                              <a:s>
                                 <a:s>event: </a:s>
                                 <a:s r="617">
                                    <a:s>{</a:s>
                                    <a:s r="622">
                                       <a:s>ToString(</a:s>
                                       <a:s r="618">
                                          <a:s>nextdue</a:s>
                                       </a:s>
                                       <a:s>)</a:s>
                                    </a:s>
                                    <a:s>}</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>,
      </a:s>
                              <a:s>
                                 <a:s>repeat: </a:s>
                                 <a:s r="624">
                                    <a:s>{
        </a:s>
                                    <a:s>
                                       <a:s>boundsPeriod: </a:s>
                                       <a:s r="625">
                                          <a:s>{
          </a:s>
                                          <a:s>
                                             <a:s>start: </a:s>
                                             <a:s r="626">
                                                <a:s>if </a:s>
                                                <a:s r="629">
                                                   <a:s r="627">
                                                      <a:s>timingAge</a:s>
                                                   </a:s>
                                                   <a:s> is not null</a:s>
                                                </a:s>
                                                <a:s> then </a:s>
                                                <a:s r="635">
                                                   <a:s>ToString(</a:s>
                                                   <a:s r="631">
                                                      <a:s>CalculateStartDateByAge(</a:s>
                                                      <a:s r="630">
                                                         <a:s>timingAge</a:s>
                                                      </a:s>
                                                      <a:s>)</a:s>
                                                   </a:s>
                                                   <a:s>)</a:s>
                                                </a:s>
                                                <a:s r="637"> else null</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s>
        }</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>,
        </a:s>
                                    <a:s>
                                       <a:s>frequency: </a:s>
                                       <a:s r="640">
                                          <a:s r="639">
                                             <a:s>repeat</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="640">
                                             <a:s>frequency</a:s>
                                          </a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>,
        </a:s>
                                    <a:s>
                                       <a:s>period: </a:s>
                                       <a:s r="642">
                                          <a:s r="641">
                                             <a:s>repeat</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="642">
                                             <a:s>period</a:s>
                                          </a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>,
        </a:s>
                                    <a:s>
                                       <a:s>periodUnit: </a:s>
                                       <a:s r="644">
                                          <a:s r="643">
                                             <a:s>repeat</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="644">
                                             <a:s>periodUnit</a:s>
                                          </a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>
      }</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>
    }</a:s>
                           </a:s>
                        </a:s>
                        <a:s>,
  </a:s>
                        <a:s r="645">
                           <a:s>flag: </a:s>
                           <a:s r="650">
                              <a:s>EvaluateFlagDefault(</a:s>
                              <a:s r="646">
                                 <a:s>nextdue</a:s>
                              </a:s>
                              <a:s>)</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s>    
  </a:s>
                     <a:s r="699">
                        <a:s>return      
  </a:s>
                        <a:s r="700">
                           <a:s>Tuple {
    </a:s>
                           <a:s>
                              <a:s>code: </a:s>
                              <a:s r="701">
                                 <a:s>C</a:s>
                              </a:s>
                           </a:s>
                           <a:s>,
    </a:s>
                           <a:s>
                              <a:s>reason: </a:s>
                              <a:s r="702">
                                 <a:s>reason</a:s>
                              </a:s>
                           </a:s>
                           <a:s>,
    </a:s>
                           <a:s>
                              <a:s>documentation: </a:s>
                              <a:s r="703">
                                 <a:s>documentation</a:s>
                              </a:s>
                           </a:s>
                           <a:s>,
    </a:s>
                           <a:s>
                              <a:s>timingAge: </a:s>
                              <a:s r="704">
                                 <a:s>timingAge</a:s>
                              </a:s>
                           </a:s>
                           <a:s>,
    </a:s>
                           <a:s>
                              <a:s>timingTiming: </a:s>
                              <a:s r="705">
                                 <a:s>timingTiming</a:s>
                              </a:s>
                           </a:s>
                           <a:s>,
    </a:s>
                           <a:s>
                              <a:s>flag: </a:s>
                              <a:s r="706">
                                 <a:s>flag</a:s>
                              </a:s>
                           </a:s>
                           <a:s>
  }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="707" locator="62:3-86:3" xsi:type="Query">
            <source localId="308" locator="62:3-62:8" alias="C">
               <expression localId="309" locator="62:3-62:6" name="code" xsi:type="OperandRef"/>
            </source>
            <let localId="310" locator="63:7-63:91" identifier="startDate">
               <expression localId="311" locator="63:18-63:91" xsi:type="If">
                  <condition localId="314" locator="63:21-63:41" xsi:type="Not">
                     <operand localId="313" locator="63:21-63:41" xsi:type="IsNull">
                        <operand localId="312" locator="63:21-63:29" name="timingAge" xsi:type="OperandRef"/>
                     </operand>
                  </condition>
                  <then localId="323" locator="63:48-63:81" name="CalculateStartDateByAge" xsi:type="FunctionRef">
                     <operand localId="315" locator="63:72-63:80" name="timingAge" xsi:type="OperandRef"/>
                  </then>
                  <else localId="339" asType="t:Date" xsi:type="As">
                     <operand localId="338" locator="63:88-63:91" xsi:type="Null"/>
                  </else>
               </expression>
            </let>
            <let localId="340" locator="64:3-65:75" identifier="nextdue">
               <expression localId="341" locator="64:12-65:75" xsi:type="If">
                  <condition localId="344" locator="64:15-64:31" xsi:type="Not">
                     <operand localId="343" locator="64:15-64:31" xsi:type="IsNull">
                        <operand localId="342" locator="64:15-64:19" name="event" xsi:type="OperandRef"/>
                     </operand>
                  </condition>
                  <then localId="345" locator="64:38-64:42" name="event" xsi:type="OperandRef"/>
                  <else localId="367" locator="65:10-65:75" name="CalculateNextDueByCodeAndInterval" xsi:type="FunctionRef">
                     <operand localId="350" locator="65:44-65:55" xsi:type="ToConcept">
                        <signature localId="351" name="t:Code" xsi:type="NamedTypeSpecifier"/>
                        <operand localId="346" locator="65:54" name="C" xsi:type="AliasRef"/>
                     </operand>
                     <operand localId="369" xsi:type="ToDateTime">
                        <signature localId="370" name="t:Date" xsi:type="NamedTypeSpecifier"/>
                        <operand localId="352" locator="65:58-65:66" name="startDate" xsi:type="QueryLetRef"/>
                     </operand>
                     <operand localId="353" locator="65:69-65:74" name="repeat" xsi:type="OperandRef"/>
                  </else>
               </expression>
            </let>
            <let localId="615" locator="66:3-76:5" identifier="timingTiming">
               <expression localId="616" locator="66:17-76:5" xsi:type="Tuple">
                  <element name="event">
                     <value localId="617" locator="67:14-67:32" xsi:type="List">
                        <element localId="622" locator="67:15-67:31" xsi:type="ToString">
                           <signature localId="623" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
                           <operand localId="618" locator="67:24-67:30" name="nextdue" xsi:type="QueryLetRef"/>
                        </element>
                     </value>
                  </element>
                  <element name="repeat">
                     <value localId="624" locator="68:15-75:7" xsi:type="Tuple">
                        <element name="boundsPeriod">
                           <value localId="625" locator="69:23-71:9" xsi:type="Tuple">
                              <element name="start">
                                 <value localId="626" locator="70:18-70:101" xsi:type="If">
                                    <condition localId="629" locator="70:21-70:41" xsi:type="Not">
                                       <operand localId="628" locator="70:21-70:41" xsi:type="IsNull">
                                          <operand localId="627" locator="70:21-70:29" name="timingAge" xsi:type="OperandRef"/>
                                       </operand>
                                    </condition>
                                    <then localId="635" locator="70:48-70:91" xsi:type="ToString">
                                       <signature localId="636" name="t:Date" xsi:type="NamedTypeSpecifier"/>
                                       <operand localId="631" locator="70:57-70:90" name="CalculateStartDateByAge" xsi:type="FunctionRef">
                                          <operand localId="630" locator="70:81-70:89" name="timingAge" xsi:type="OperandRef"/>
                                       </operand>
                                    </then>
                                    <else localId="638" asType="t:String" xsi:type="As">
                                       <operand localId="637" locator="70:98-70:101" xsi:type="Null"/>
                                    </else>
                                 </value>
                              </element>
                           </value>
                        </element>
                        <element name="frequency">
                           <value localId="640" locator="72:20-72:35" path="frequency" xsi:type="Property">
                              <source localId="639" locator="72:20-72:25" name="repeat" xsi:type="OperandRef"/>
                           </value>
                        </element>
                        <element name="period">
                           <value localId="642" locator="73:17-73:29" path="period" xsi:type="Property">
                              <source localId="641" locator="73:17-73:22" name="repeat" xsi:type="OperandRef"/>
                           </value>
                        </element>
                        <element name="periodUnit">
                           <value localId="644" locator="74:21-74:37" path="periodUnit" xsi:type="Property">
                              <source localId="643" locator="74:21-74:26" name="repeat" xsi:type="OperandRef"/>
                           </value>
                        </element>
                     </value>
                  </element>
               </expression>
            </let>
            <let localId="645" locator="77:3-77:36" identifier="flag">
               <expression localId="650" locator="77:9-77:36" name="EvaluateFlagDefault" xsi:type="FunctionRef">
                  <operand localId="646" locator="77:29-77:35" name="nextdue" xsi:type="QueryLetRef"/>
               </expression>
            </let>
            <return localId="699" locator="78:3-86:3">
               <expression localId="700" locator="79:3-86:3" xsi:type="Tuple">
                  <element name="code">
                     <value localId="701" locator="80:11" name="C" xsi:type="AliasRef"/>
                  </element>
                  <element name="reason">
                     <value localId="702" locator="81:13-81:18" name="reason" xsi:type="OperandRef"/>
                  </element>
                  <element name="documentation">
                     <value localId="703" locator="82:20-82:32" name="documentation" xsi:type="OperandRef"/>
                  </element>
                  <element name="timingAge">
                     <value localId="704" locator="83:16-83:24" name="timingAge" xsi:type="OperandRef"/>
                  </element>
                  <element name="timingTiming">
                     <value localId="705" locator="84:19-84:30" name="timingTiming" xsi:type="QueryLetRef"/>
                  </element>
                  <element name="flag">
                     <value localId="706" locator="85:11-85:14" name="flag" xsi:type="QueryLetRef"/>
                  </element>
               </expression>
            </return>
         </expression>
         <operand localId="251" name="code">
            <operandTypeSpecifier localId="250" locator="52:10-52:20" name="t:Code" xsi:type="NamedTypeSpecifier"/>
         </operand>
         <operand localId="253" name="reason">
            <operandTypeSpecifier localId="252" locator="53:12-53:22" name="t:Code" xsi:type="NamedTypeSpecifier"/>
         </operand>
         <operand localId="257" name="documentation">
            <operandTypeSpecifier localId="254" locator="54:19-54:44" xsi:type="TupleTypeSpecifier">
               <element localId="255" locator="54:25-54:43" name="label">
                  <elementType localId="256" locator="54:31-54:43" name="t:String" xsi:type="NamedTypeSpecifier"/>
               </element>
            </operandTypeSpecifier>
         </operand>
         <operand localId="263" name="timingAge">
            <operandTypeSpecifier localId="258" locator="55:15-55:47" xsi:type="TupleTypeSpecifier">
               <element localId="259" locator="55:21-55:33" name="value">
                  <elementType localId="260" locator="55:27-55:33" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
               </element>
               <element localId="261" locator="55:36-55:46" name="code">
                  <elementType localId="262" locator="55:41-55:46" name="t:String" xsi:type="NamedTypeSpecifier"/>
               </element>
            </operandTypeSpecifier>
         </operand>
         <operand localId="265" name="event">
            <operandTypeSpecifier localId="264" locator="56:11-56:25" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
         </operand>
         <operand localId="273" name="repeat">
            <operandTypeSpecifier localId="266" locator="57:12-57:89" xsi:type="TupleTypeSpecifier">
               <element localId="267" locator="57:18-57:41" name="frequency">
                  <elementType localId="268" locator="57:28-57:41" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
               </element>
               <element localId="269" locator="57:43-57:63" name="period">
                  <elementType localId="270" locator="57:50-57:63" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
               </element>
               <element localId="271" locator="57:65-57:88" name="periodUnit">
                  <elementType localId="272" locator="57:76-57:88" name="t:String" xsi:type="NamedTypeSpecifier"/>
               </element>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="316" locator="88:1-89:113" name="CalculateStartDateByAge" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="316">
               <a:s>define function CalculateStartDateByAge(timingAge Tuple{value Decimal, code String}): 
  </a:s>
               <a:s r="708">
                  <a:s r="708">
                     <a:s r="710">
                        <a:s r="709">
                           <a:s>Patient</a:s>
                        </a:s>
                        <a:s>.</a:s>
                        <a:s r="710">
                           <a:s>birthDate</a:s>
                        </a:s>
                     </a:s>
                     <a:s> + </a:s>
                     <a:s r="711">
                        <a:s>System.Quantity{</a:s>
                        <a:s>
                           <a:s>value: </a:s>
                           <a:s r="714">
                              <a:s>(</a:s>
                              <a:s r="714">
                                 <a:s r="713">
                                    <a:s>timingAge</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="714">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>)</a:s>
                           </a:s>
                        </a:s>
                        <a:s>, </a:s>
                        <a:s>
                           <a:s>unit: </a:s>
                           <a:s r="718">
                              <a:s r="715">
                                 <a:s>FHIRHelpers</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="718">
                                 <a:s>ToCalendarUnit(</a:s>
                                 <a:s r="717">
                                    <a:s r="716">
                                       <a:s>timingAge</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="717">
                                       <a:s>code</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s>}</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="708" locator="89:3-89:113" xsi:type="Add">
            <signature localId="720" name="t:Date" xsi:type="NamedTypeSpecifier"/>
            <signature localId="721" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
            <operand localId="719" name="ToDate" libraryName="FHIRHelpers" xsi:type="FunctionRef">
               <operand localId="710" locator="89:3-89:19" path="birthDate" xsi:type="Property">
                  <source localId="709" locator="89:3-89:9" name="Patient" xsi:type="ExpressionRef"/>
               </operand>
            </operand>
            <operand localId="711" locator="89:23-89:113" classType="t:Quantity" xsi:type="Instance">
               <element name="value">
                  <value localId="714" locator="89:46-89:62" path="value" xsi:type="Property">
                     <source localId="713" locator="89:47-89:55" name="timingAge" xsi:type="OperandRef"/>
                  </value>
               </element>
               <element name="unit">
                  <value localId="718" locator="89:71-89:112" name="ToCalendarUnit" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="717" locator="89:98-89:111" path="code" xsi:type="Property">
                        <source localId="716" locator="89:98-89:106" name="timingAge" xsi:type="OperandRef"/>
                     </operand>
                  </value>
               </element>
            </operand>
         </expression>
         <operand localId="322" name="timingAge">
            <operandTypeSpecifier localId="317" locator="88:51-88:83" xsi:type="TupleTypeSpecifier">
               <element localId="318" locator="88:57-88:69" name="value">
                  <elementType localId="319" locator="88:63-88:69" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
               </element>
               <element localId="320" locator="88:72-88:82" name="code">
                  <elementType localId="321" locator="88:77-88:82" name="t:String" xsi:type="NamedTypeSpecifier"/>
               </element>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="354" locator="126:1-160:7" name="CalculateNextDueByCodeAndInterval" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="354">
               <a:s>//------------------------------------------------------------------------------
// Calculated next due date
//------------------------------------------------------------------------------
//  +startDate, +repeat, +lastreport = use startDate if > lastreport else lastreport + repeat
//  +startDate, +repeat, -lastreport = use startDate
//  +startDate, -repeat, +lastreport = use startDate if > lastreport else no prediction (non-repeating and ?completed)
//  +startDate, -repeat, -lastreport = use startDate
//  -startDate, +repeat, +lastreport = use lastreport + repeat
//  -startDate, +repeat, -lastreport = use today
//  -startDate, -repeat, +lastreport = no prediction (non-repeating and ?completed)
//  -startDate, -repeat, -lastreport = use today
define function CalculateNextDueByCodeAndInterval(code Concept, 
    startDate DateTime,
    repeat Tuple{frequency System.Integer,period System.Decimal,periodUnit System.String}):
  </a:s>
               <a:s r="989">
                  <a:s r="989">
                     <a:s>
                        <a:s r="824">
                           <a:s r="825">
                              <a:s>
                                 <a:s>code</a:s>
                              </a:s>
                           </a:s>
                           <a:s> C</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
  //TODO: add last report lookup from observation for cases where report itself is not transmitted, only documented in a flowsheet
  </a:s>
                     <a:s>
                        <a:s>let </a:s>
                        <a:s r="826">
                           <a:s>lastReport: </a:s>
                           <a:s r="828">
                              <a:s>MostRecentDiagnosticReportByCode(</a:s>
                              <a:s r="827">
                                 <a:s>C</a:s>
                              </a:s>
                              <a:s>)</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s>
  </a:s>
                     <a:s r="829">
                        <a:s>return
    </a:s>
                        <a:s r="830">
                           <a:s>case
      // +startDate, +repeat, +lastReport
      </a:s>
                           <a:s r="831">
                              <a:s>when </a:s>
                              <a:s r="832">
                                 <a:s r="833">
                                    <a:s r="836">
                                       <a:s r="834">
                                          <a:s>startDate</a:s>
                                       </a:s>
                                       <a:s> is not null</a:s>
                                    </a:s>
                                    <a:s> and </a:s>
                                    <a:s r="838">
                                       <a:s>RepeatIsValid(</a:s>
                                       <a:s r="837">
                                          <a:s>repeat</a:s>
                                       </a:s>
                                       <a:s>)</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> and </a:s>
                                 <a:s r="841">
                                    <a:s r="839">
                                       <a:s>lastReport</a:s>
                                    </a:s>
                                    <a:s> is not null</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> then
        </a:s>
                              <a:s r="842">
                                 <a:s>if </a:s>
                                 <a:s r="843">
                                    <a:s r="844">
                                       <a:s>startDate</a:s>
                                    </a:s>
                                    <a:s> > </a:s>
                                    <a:s r="845">
                                       <a:s r="849">
                                          <a:s r="846">
                                             <a:s>FHIRHelpers</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="849">
                                             <a:s>ToDateTime(</a:s>
                                             <a:s r="848">
                                                <a:s r="847">
                                                   <a:s>lastReport</a:s>
                                                </a:s>
                                                <a:s>.</a:s>
                                                <a:s r="848">
                                                   <a:s>effective</a:s>
                                                </a:s>
                                             </a:s>
                                             <a:s>)</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s> as </a:s>
                                       <a:s r="852">
                                          <a:s>DateTime</a:s>
                                       </a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> then </a:s>
                                 <a:s r="855">
                                    <a:s>startDate</a:s>
                                 </a:s>
                                 <a:s> 
        else </a:s>
                                 <a:s r="856">
                                    <a:s>date from </a:s>
                                    <a:s r="866">
                                       <a:s>AddIntervalToDateTime(</a:s>
                                       <a:s r="857">
                                          <a:s r="861">
                                             <a:s r="858">
                                                <a:s>FHIRHelpers</a:s>
                                             </a:s>
                                             <a:s>.</a:s>
                                             <a:s r="861">
                                                <a:s>ToDateTime(</a:s>
                                                <a:s r="860">
                                                   <a:s r="859">
                                                      <a:s>lastReport</a:s>
                                                   </a:s>
                                                   <a:s>.</a:s>
                                                   <a:s r="860">
                                                      <a:s>effective</a:s>
                                                   </a:s>
                                                </a:s>
                                                <a:s>)</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s> as </a:s>
                                          <a:s r="864">
                                             <a:s>DateTime</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s>, </a:s>
                                       <a:s r="865">
                                          <a:s>repeat</a:s>
                                       </a:s>
                                       <a:s>)</a:s>
                                    </a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                           <a:s>
      // +startDate, +repeat, -lastReport
      </a:s>
                           <a:s r="870">
                              <a:s>when </a:s>
                              <a:s r="871">
                                 <a:s r="872">
                                    <a:s r="875">
                                       <a:s r="873">
                                          <a:s>startDate</a:s>
                                       </a:s>
                                       <a:s> is not null</a:s>
                                    </a:s>
                                    <a:s> and </a:s>
                                    <a:s r="877">
                                       <a:s>RepeatIsValid(</a:s>
                                       <a:s r="876">
                                          <a:s>repeat</a:s>
                                       </a:s>
                                       <a:s>)</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> and </a:s>
                                 <a:s r="879">
                                    <a:s r="878">
                                       <a:s>lastReport</a:s>
                                    </a:s>
                                    <a:s> is null</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> then
        </a:s>
                              <a:s r="880">
                                 <a:s>startDate</a:s>
                              </a:s>
                           </a:s>
                           <a:s>
      // +startDate, -repeat, +lastReport
      </a:s>
                           <a:s r="881">
                              <a:s>when </a:s>
                              <a:s r="882">
                                 <a:s r="883">
                                    <a:s r="886">
                                       <a:s r="884">
                                          <a:s>startDate</a:s>
                                       </a:s>
                                       <a:s> is not null</a:s>
                                    </a:s>
                                    <a:s> and </a:s>
                                    <a:s r="888">
                                       <a:s r="887">
                                          <a:s>repeat</a:s>
                                       </a:s>
                                       <a:s> is null</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> and </a:s>
                                 <a:s r="891">
                                    <a:s r="889">
                                       <a:s>lastReport</a:s>
                                    </a:s>
                                    <a:s> is not null</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> then
        </a:s>
                              <a:s r="892">
                                 <a:s>if </a:s>
                                 <a:s r="893">
                                    <a:s r="894">
                                       <a:s>startDate</a:s>
                                    </a:s>
                                    <a:s> > </a:s>
                                    <a:s r="895">
                                       <a:s r="899">
                                          <a:s r="896">
                                             <a:s>FHIRHelpers</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="899">
                                             <a:s>ToDateTime(</a:s>
                                             <a:s r="898">
                                                <a:s r="897">
                                                   <a:s>lastReport</a:s>
                                                </a:s>
                                                <a:s>.</a:s>
                                                <a:s r="898">
                                                   <a:s>effective</a:s>
                                                </a:s>
                                             </a:s>
                                             <a:s>)</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s> as </a:s>
                                       <a:s r="902">
                                          <a:s>DateTime</a:s>
                                       </a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> then </a:s>
                                 <a:s r="905">
                                    <a:s>startDate</a:s>
                                 </a:s>
                                 <a:s r="906"> else null</a:s>
                              </a:s>
                           </a:s>
                           <a:s>
      // +startDate, -repeat, -lastReport
      </a:s>
                           <a:s r="908">
                              <a:s>when </a:s>
                              <a:s r="909">
                                 <a:s r="910">
                                    <a:s r="913">
                                       <a:s r="911">
                                          <a:s>startDate</a:s>
                                       </a:s>
                                       <a:s> is not null</a:s>
                                    </a:s>
                                    <a:s> and </a:s>
                                    <a:s r="915">
                                       <a:s r="914">
                                          <a:s>repeat</a:s>
                                       </a:s>
                                       <a:s> is null</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> and </a:s>
                                 <a:s r="917">
                                    <a:s r="916">
                                       <a:s>lastReport</a:s>
                                    </a:s>
                                    <a:s> is null</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> then
        </a:s>
                              <a:s r="918">
                                 <a:s>startDate</a:s>
                              </a:s>
                           </a:s>
                           <a:s>
      // -startDate, +repeat, +lastReport
      </a:s>
                           <a:s r="919">
                              <a:s>when </a:s>
                              <a:s r="920">
                                 <a:s r="921">
                                    <a:s r="923">
                                       <a:s r="922">
                                          <a:s>startDate</a:s>
                                       </a:s>
                                       <a:s> is null</a:s>
                                    </a:s>
                                    <a:s> and </a:s>
                                    <a:s r="925">
                                       <a:s>RepeatIsValid(</a:s>
                                       <a:s r="924">
                                          <a:s>repeat</a:s>
                                       </a:s>
                                       <a:s>)</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> and </a:s>
                                 <a:s r="928">
                                    <a:s r="926">
                                       <a:s>lastReport</a:s>
                                    </a:s>
                                    <a:s> is not null</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> then
        </a:s>
                              <a:s r="929">
                                 <a:s>date from </a:s>
                                 <a:s r="939">
                                    <a:s>AddIntervalToDateTime(</a:s>
                                    <a:s r="930">
                                       <a:s r="934">
                                          <a:s r="931">
                                             <a:s>FHIRHelpers</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="934">
                                             <a:s>ToDateTime(</a:s>
                                             <a:s r="933">
                                                <a:s r="932">
                                                   <a:s>lastReport</a:s>
                                                </a:s>
                                                <a:s>.</a:s>
                                                <a:s r="933">
                                                   <a:s>effective</a:s>
                                                </a:s>
                                             </a:s>
                                             <a:s>)</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s> as </a:s>
                                       <a:s r="937">
                                          <a:s>DateTime</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s>, </a:s>
                                    <a:s r="938">
                                       <a:s>repeat</a:s>
                                    </a:s>
                                    <a:s>)</a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                           <a:s>
      // -startDate, +repeat, -lastReport
      </a:s>
                           <a:s r="940">
                              <a:s>when </a:s>
                              <a:s r="941">
                                 <a:s r="942">
                                    <a:s r="944">
                                       <a:s r="943">
                                          <a:s>startDate</a:s>
                                       </a:s>
                                       <a:s> is null</a:s>
                                    </a:s>
                                    <a:s> and </a:s>
                                    <a:s r="946">
                                       <a:s>RepeatIsValid(</a:s>
                                       <a:s r="945">
                                          <a:s>repeat</a:s>
                                       </a:s>
                                       <a:s>)</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> and </a:s>
                                 <a:s r="948">
                                    <a:s r="947">
                                       <a:s>lastReport</a:s>
                                    </a:s>
                                    <a:s> is null</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> then
        </a:s>
                              <a:s r="951">
                                 <a:s>Today()</a:s>
                              </a:s>
                           </a:s>
                           <a:s>
      // -startDate, -repeat, +lastReport
      </a:s>
                           <a:s r="952">
                              <a:s>when </a:s>
                              <a:s r="953">
                                 <a:s r="954">
                                    <a:s r="956">
                                       <a:s r="955">
                                          <a:s>startDate</a:s>
                                       </a:s>
                                       <a:s> is null</a:s>
                                    </a:s>
                                    <a:s> and </a:s>
                                    <a:s r="959">
                                       <a:s r="958">
                                          <a:s>RepeatIsValid(</a:s>
                                          <a:s r="957">
                                             <a:s>repeat</a:s>
                                          </a:s>
                                          <a:s>)</a:s>
                                       </a:s>
                                       <a:s> is false</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> and </a:s>
                                 <a:s r="962">
                                    <a:s r="960">
                                       <a:s>lastReport</a:s>
                                    </a:s>
                                    <a:s> is not null</a:s>
                                 </a:s>
                              </a:s>
                              <a:s r="963"> then
        null</a:s>
                           </a:s>
                           <a:s>
      // -startDate, -repeat, -lastReport
      </a:s>
                           <a:s r="964">
                              <a:s>when </a:s>
                              <a:s r="965">
                                 <a:s r="966">
                                    <a:s r="968">
                                       <a:s r="967">
                                          <a:s>startDate</a:s>
                                       </a:s>
                                       <a:s> is null</a:s>
                                    </a:s>
                                    <a:s> and </a:s>
                                    <a:s r="971">
                                       <a:s r="970">
                                          <a:s>RepeatIsValid(</a:s>
                                          <a:s r="969">
                                             <a:s>repeat</a:s>
                                          </a:s>
                                          <a:s>)</a:s>
                                       </a:s>
                                       <a:s> is false</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> and </a:s>
                                 <a:s r="973">
                                    <a:s r="972">
                                       <a:s>lastReport</a:s>
                                    </a:s>
                                    <a:s> is null</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> then
        </a:s>
                              <a:s r="976">
                                 <a:s>Today()</a:s>
                              </a:s>
                           </a:s>
                           <a:s r="977">
      else null  
    end</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="989" locator="129:3-160:7" xsi:type="Query">
            <source localId="824" locator="129:3-129:8" alias="C">
               <expression localId="825" locator="129:3-129:6" name="code" xsi:type="OperandRef"/>
            </source>
            <let localId="826" locator="131:7-131:53" identifier="lastReport">
               <expression localId="828" locator="131:19-131:53" name="MostRecentDiagnosticReportByCode" xsi:type="FunctionRef">
                  <operand localId="827" locator="131:52" name="C" xsi:type="AliasRef"/>
               </expression>
            </let>
            <return localId="829" locator="132:3-160:7">
               <expression localId="830" locator="133:5-160:7" xsi:type="Case">
                  <caseItem localId="831" locator="135:7-137:110">
                     <when localId="832" locator="135:12-135:85" xsi:type="And">
                        <operand localId="833" locator="135:12-135:58" xsi:type="And">
                           <operand localId="836" locator="135:12-135:32" xsi:type="Not">
                              <operand localId="835" locator="135:12-135:32" xsi:type="IsNull">
                                 <operand localId="834" locator="135:12-135:20" name="startDate" xsi:type="OperandRef"/>
                              </operand>
                           </operand>
                           <operand localId="838" locator="135:38-135:58" name="RepeatIsValid" xsi:type="FunctionRef">
                              <operand localId="837" locator="135:52-135:57" name="repeat" xsi:type="OperandRef"/>
                           </operand>
                        </operand>
                        <operand localId="841" locator="135:64-135:85" xsi:type="Not">
                           <operand localId="840" locator="135:64-135:85" xsi:type="IsNull">
                              <operand localId="839" locator="135:64-135:73" name="lastReport" xsi:type="QueryLetRef"/>
                           </operand>
                        </operand>
                     </when>
                     <then localId="842" locator="136:9-137:110" xsi:type="If">
                        <condition localId="843" locator="136:12-136:79" xsi:type="Greater">
                           <signature localId="853" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
                           <signature localId="854" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
                           <operand localId="844" locator="136:12-136:20" name="startDate" xsi:type="OperandRef"/>
                           <operand localId="845" locator="136:24-136:79" strict="false" xsi:type="As">
                              <operand localId="849" locator="136:24-136:67" name="ToDateTime" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <signature localId="851" name="fhir:dateTime" xsi:type="NamedTypeSpecifier"/>
                                 <operand localId="850" asType="fhir:dateTime" xsi:type="As">
                                    <operand localId="848" locator="136:47-136:66" path="effective" xsi:type="Property">
                                       <source localId="847" locator="136:47-136:56" name="lastReport" xsi:type="QueryLetRef"/>
                                    </operand>
                                 </operand>
                              </operand>
                              <asTypeSpecifier localId="852" locator="136:72-136:79" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
                           </operand>
                        </condition>
                        <then localId="855" locator="136:86-136:94" name="startDate" xsi:type="OperandRef"/>
                        <else localId="868" xsi:type="ToDateTime">
                           <signature localId="869" name="t:Date" xsi:type="NamedTypeSpecifier"/>
                           <operand localId="856" locator="137:14-137:110" xsi:type="DateFrom">
                              <operand localId="866" locator="137:24-137:110" name="AddIntervalToDateTime" xsi:type="FunctionRef">
                                 <operand localId="857" locator="137:46-137:101" strict="false" xsi:type="As">
                                    <operand localId="861" locator="137:46-137:89" name="ToDateTime" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                       <signature localId="863" name="fhir:dateTime" xsi:type="NamedTypeSpecifier"/>
                                       <operand localId="862" asType="fhir:dateTime" xsi:type="As">
                                          <operand localId="860" locator="137:69-137:88" path="effective" xsi:type="Property">
                                             <source localId="859" locator="137:69-137:78" name="lastReport" xsi:type="QueryLetRef"/>
                                          </operand>
                                       </operand>
                                    </operand>
                                    <asTypeSpecifier localId="864" locator="137:94-137:101" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
                                 </operand>
                                 <operand localId="865" locator="137:104-137:109" name="repeat" xsi:type="OperandRef"/>
                              </operand>
                           </operand>
                        </else>
                     </then>
                  </caseItem>
                  <caseItem localId="870" locator="139:7-140:17">
                     <when localId="871" locator="139:12-139:81" xsi:type="And">
                        <operand localId="872" locator="139:12-139:58" xsi:type="And">
                           <operand localId="875" locator="139:12-139:32" xsi:type="Not">
                              <operand localId="874" locator="139:12-139:32" xsi:type="IsNull">
                                 <operand localId="873" locator="139:12-139:20" name="startDate" xsi:type="OperandRef"/>
                              </operand>
                           </operand>
                           <operand localId="877" locator="139:38-139:58" name="RepeatIsValid" xsi:type="FunctionRef">
                              <operand localId="876" locator="139:52-139:57" name="repeat" xsi:type="OperandRef"/>
                           </operand>
                        </operand>
                        <operand localId="879" locator="139:64-139:81" xsi:type="IsNull">
                           <operand localId="878" locator="139:64-139:73" name="lastReport" xsi:type="QueryLetRef"/>
                        </operand>
                     </when>
                     <then localId="880" locator="140:9-140:17" name="startDate" xsi:type="OperandRef"/>
                  </caseItem>
                  <caseItem localId="881" locator="142:7-143:104">
                     <when localId="882" locator="142:12-142:78" xsi:type="And">
                        <operand localId="883" locator="142:12-142:51" xsi:type="And">
                           <operand localId="886" locator="142:12-142:32" xsi:type="Not">
                              <operand localId="885" locator="142:12-142:32" xsi:type="IsNull">
                                 <operand localId="884" locator="142:12-142:20" name="startDate" xsi:type="OperandRef"/>
                              </operand>
                           </operand>
                           <operand localId="888" locator="142:38-142:51" xsi:type="IsNull">
                              <operand localId="887" locator="142:38-142:43" name="repeat" xsi:type="OperandRef"/>
                           </operand>
                        </operand>
                        <operand localId="891" locator="142:57-142:78" xsi:type="Not">
                           <operand localId="890" locator="142:57-142:78" xsi:type="IsNull">
                              <operand localId="889" locator="142:57-142:66" name="lastReport" xsi:type="QueryLetRef"/>
                           </operand>
                        </operand>
                     </when>
                     <then localId="892" locator="143:9-143:104" xsi:type="If">
                        <condition localId="893" locator="143:12-143:79" xsi:type="Greater">
                           <signature localId="903" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
                           <signature localId="904" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
                           <operand localId="894" locator="143:12-143:20" name="startDate" xsi:type="OperandRef"/>
                           <operand localId="895" locator="143:24-143:79" strict="false" xsi:type="As">
                              <operand localId="899" locator="143:24-143:67" name="ToDateTime" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <signature localId="901" name="fhir:dateTime" xsi:type="NamedTypeSpecifier"/>
                                 <operand localId="900" asType="fhir:dateTime" xsi:type="As">
                                    <operand localId="898" locator="143:47-143:66" path="effective" xsi:type="Property">
                                       <source localId="897" locator="143:47-143:56" name="lastReport" xsi:type="QueryLetRef"/>
                                    </operand>
                                 </operand>
                              </operand>
                              <asTypeSpecifier localId="902" locator="143:72-143:79" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
                           </operand>
                        </condition>
                        <then localId="905" locator="143:86-143:94" name="startDate" xsi:type="OperandRef"/>
                        <else localId="907" asType="t:DateTime" xsi:type="As">
                           <operand localId="906" locator="143:101-143:104" xsi:type="Null"/>
                        </else>
                     </then>
                  </caseItem>
                  <caseItem localId="908" locator="145:7-146:17">
                     <when localId="909" locator="145:12-145:74" xsi:type="And">
                        <operand localId="910" locator="145:12-145:51" xsi:type="And">
                           <operand localId="913" locator="145:12-145:32" xsi:type="Not">
                              <operand localId="912" locator="145:12-145:32" xsi:type="IsNull">
                                 <operand localId="911" locator="145:12-145:20" name="startDate" xsi:type="OperandRef"/>
                              </operand>
                           </operand>
                           <operand localId="915" locator="145:38-145:51" xsi:type="IsNull">
                              <operand localId="914" locator="145:38-145:43" name="repeat" xsi:type="OperandRef"/>
                           </operand>
                        </operand>
                        <operand localId="917" locator="145:57-145:74" xsi:type="IsNull">
                           <operand localId="916" locator="145:57-145:66" name="lastReport" xsi:type="QueryLetRef"/>
                        </operand>
                     </when>
                     <then localId="918" locator="146:9-146:17" name="startDate" xsi:type="OperandRef"/>
                  </caseItem>
                  <caseItem localId="919" locator="148:7-149:105">
                     <when localId="920" locator="148:12-148:81" xsi:type="And">
                        <operand localId="921" locator="148:12-148:54" xsi:type="And">
                           <operand localId="923" locator="148:12-148:28" xsi:type="IsNull">
                              <operand localId="922" locator="148:12-148:20" name="startDate" xsi:type="OperandRef"/>
                           </operand>
                           <operand localId="925" locator="148:34-148:54" name="RepeatIsValid" xsi:type="FunctionRef">
                              <operand localId="924" locator="148:48-148:53" name="repeat" xsi:type="OperandRef"/>
                           </operand>
                        </operand>
                        <operand localId="928" locator="148:60-148:81" xsi:type="Not">
                           <operand localId="927" locator="148:60-148:81" xsi:type="IsNull">
                              <operand localId="926" locator="148:60-148:69" name="lastReport" xsi:type="QueryLetRef"/>
                           </operand>
                        </operand>
                     </when>
                     <then localId="979" xsi:type="ToDateTime">
                        <signature localId="980" name="t:Date" xsi:type="NamedTypeSpecifier"/>
                        <operand localId="929" locator="149:9-149:105" xsi:type="DateFrom">
                           <operand localId="939" locator="149:19-149:105" name="AddIntervalToDateTime" xsi:type="FunctionRef">
                              <operand localId="930" locator="149:41-149:96" strict="false" xsi:type="As">
                                 <operand localId="934" locator="149:41-149:84" name="ToDateTime" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                    <signature localId="936" name="fhir:dateTime" xsi:type="NamedTypeSpecifier"/>
                                    <operand localId="935" asType="fhir:dateTime" xsi:type="As">
                                       <operand localId="933" locator="149:64-149:83" path="effective" xsi:type="Property">
                                          <source localId="932" locator="149:64-149:73" name="lastReport" xsi:type="QueryLetRef"/>
                                       </operand>
                                    </operand>
                                 </operand>
                                 <asTypeSpecifier localId="937" locator="149:89-149:96" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
                              </operand>
                              <operand localId="938" locator="149:99-149:104" name="repeat" xsi:type="OperandRef"/>
                           </operand>
                        </operand>
                     </then>
                  </caseItem>
                  <caseItem localId="940" locator="151:7-152:15">
                     <when localId="941" locator="151:12-151:77" xsi:type="And">
                        <operand localId="942" locator="151:12-151:54" xsi:type="And">
                           <operand localId="944" locator="151:12-151:28" xsi:type="IsNull">
                              <operand localId="943" locator="151:12-151:20" name="startDate" xsi:type="OperandRef"/>
                           </operand>
                           <operand localId="946" locator="151:34-151:54" name="RepeatIsValid" xsi:type="FunctionRef">
                              <operand localId="945" locator="151:48-151:53" name="repeat" xsi:type="OperandRef"/>
                           </operand>
                        </operand>
                        <operand localId="948" locator="151:60-151:77" xsi:type="IsNull">
                           <operand localId="947" locator="151:60-151:69" name="lastReport" xsi:type="QueryLetRef"/>
                        </operand>
                     </when>
                     <then localId="982" xsi:type="ToDateTime">
                        <signature localId="983" name="t:Date" xsi:type="NamedTypeSpecifier"/>
                        <operand localId="951" locator="152:9-152:15" xsi:type="Today"/>
                     </then>
                  </caseItem>
                  <caseItem localId="952" locator="154:7-155:12">
                     <when localId="953" locator="154:12-154:90" xsi:type="And">
                        <operand localId="954" locator="154:12-154:63" xsi:type="And">
                           <operand localId="956" locator="154:12-154:28" xsi:type="IsNull">
                              <operand localId="955" locator="154:12-154:20" name="startDate" xsi:type="OperandRef"/>
                           </operand>
                           <operand localId="959" locator="154:34-154:63" xsi:type="IsFalse">
                              <operand localId="958" locator="154:34-154:54" name="RepeatIsValid" xsi:type="FunctionRef">
                                 <operand localId="957" locator="154:48-154:53" name="repeat" xsi:type="OperandRef"/>
                              </operand>
                           </operand>
                        </operand>
                        <operand localId="962" locator="154:69-154:90" xsi:type="Not">
                           <operand localId="961" locator="154:69-154:90" xsi:type="IsNull">
                              <operand localId="960" locator="154:69-154:78" name="lastReport" xsi:type="QueryLetRef"/>
                           </operand>
                        </operand>
                     </when>
                     <then localId="984" asType="t:DateTime" xsi:type="As">
                        <operand localId="963" locator="155:9-155:12" xsi:type="Null"/>
                     </then>
                  </caseItem>
                  <caseItem localId="964" locator="157:7-158:15">
                     <when localId="965" locator="157:12-157:86" xsi:type="And">
                        <operand localId="966" locator="157:12-157:63" xsi:type="And">
                           <operand localId="968" locator="157:12-157:28" xsi:type="IsNull">
                              <operand localId="967" locator="157:12-157:20" name="startDate" xsi:type="OperandRef"/>
                           </operand>
                           <operand localId="971" locator="157:34-157:63" xsi:type="IsFalse">
                              <operand localId="970" locator="157:34-157:54" name="RepeatIsValid" xsi:type="FunctionRef">
                                 <operand localId="969" locator="157:48-157:53" name="repeat" xsi:type="OperandRef"/>
                              </operand>
                           </operand>
                        </operand>
                        <operand localId="973" locator="157:69-157:86" xsi:type="IsNull">
                           <operand localId="972" locator="157:69-157:78" name="lastReport" xsi:type="QueryLetRef"/>
                        </operand>
                     </when>
                     <then localId="986" xsi:type="ToDateTime">
                        <signature localId="987" name="t:Date" xsi:type="NamedTypeSpecifier"/>
                        <operand localId="976" locator="158:9-158:15" xsi:type="Today"/>
                     </then>
                  </caseItem>
                  <else localId="988" asType="t:DateTime" xsi:type="As">
                     <operand localId="977" locator="159:12-159:15" xsi:type="Null"/>
                  </else>
               </expression>
            </return>
         </expression>
         <operand localId="356" name="code">
            <operandTypeSpecifier localId="355" locator="126:56-126:62" name="t:Concept" xsi:type="NamedTypeSpecifier"/>
         </operand>
         <operand localId="358" name="startDate">
            <operandTypeSpecifier localId="357" locator="127:15-127:22" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
         </operand>
         <operand localId="366" name="repeat">
            <operandTypeSpecifier localId="359" locator="128:12-128:89" xsi:type="TupleTypeSpecifier">
               <element localId="360" locator="128:18-128:41" name="frequency">
                  <elementType localId="361" locator="128:28-128:41" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
               </element>
               <element localId="362" locator="128:43-128:63" name="period">
                  <elementType localId="363" locator="128:50-128:63" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
               </element>
               <element localId="364" locator="128:65-128:88" name="periodUnit">
                  <elementType localId="365" locator="128:76-128:88" name="t:String" xsi:type="NamedTypeSpecifier"/>
               </element>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="375" locator="259:1-260:78" name="MostRecentDiagnosticReportByCode" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="375">
               <a:s>//------------------------------------------------------------------------------
// Diagnostic Report Functions
//------------------------------------------------------------------------------

define function MostRecentDiagnosticReportByCode(code Concept):
  </a:s>
               <a:s r="1499">
                  <a:s r="1499">
                     <a:s r="1496">
                        <a:s>CSMCommonFunctions</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1499">
                        <a:s>MostRecentDiagnosticReport(</a:s>
                        <a:s r="1498">
                           <a:s>DiagnosticReportsByCode(</a:s>
                           <a:s r="1497">
                              <a:s>code</a:s>
                           </a:s>
                           <a:s>)</a:s>
                        </a:s>
                        <a:s>)</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1499" locator="260:3-260:78" name="MostRecentDiagnosticReport" libraryName="CSMCommonFunctions" xsi:type="FunctionRef">
            <operand localId="1498" locator="260:49-260:77" name="DiagnosticReportsByCode" xsi:type="FunctionRef">
               <operand localId="1497" locator="260:73-260:76" name="code" xsi:type="OperandRef"/>
            </operand>
         </expression>
         <operand localId="377" name="code">
            <operandTypeSpecifier localId="376" locator="259:55-259:61" name="t:Concept" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="381" locator="266:1-268:26" name="DiagnosticReportsByCode" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="381">
               <a:s>//TODO: determine if we need to look for non-test result, like specialty referral
define function DiagnosticReportsByCode(concept Concept):
  </a:s>
               <a:s r="1528">
                  <a:s r="1528">
                     <a:s>
                        <a:s r="1519">
                           <a:s r="1520">
                              <a:s r="1520">
                                 <a:s>[DiagnosticReport]</a:s>
                              </a:s>
                           </a:s>
                           <a:s> R</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="1521">
                        <a:s>where </a:s>
                        <a:s r="1521">
                           <a:s r="1523">
                              <a:s r="1522">
                                 <a:s>R</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="1523">
                                 <a:s>code</a:s>
                              </a:s>
                           </a:s>
                           <a:s> ~ </a:s>
                           <a:s r="1524">
                              <a:s>concept</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1528" locator="267:3-268:26" xsi:type="Query">
            <source localId="1519" locator="267:3-267:22" alias="R">
               <expression localId="1520" locator="267:3-267:20" dataType="fhir:DiagnosticReport" templateId="http://hl7.org/fhir/StructureDefinition/DiagnosticReport" xsi:type="Retrieve"/>
            </source>
            <where localId="1521" locator="268:5-268:26" xsi:type="Equivalent">
               <signature localId="1526" name="t:Concept" xsi:type="NamedTypeSpecifier"/>
               <signature localId="1527" name="t:Concept" xsi:type="NamedTypeSpecifier"/>
               <operand localId="1525" name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="1523" locator="268:11-268:16" path="code" scope="R" xsi:type="Property"/>
               </operand>
               <operand localId="1524" locator="268:20-268:26" name="concept" xsi:type="OperandRef"/>
            </where>
         </expression>
         <operand localId="383" name="concept">
            <operandTypeSpecifier localId="382" locator="266:49-266:55" name="t:Concept" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="405" locator="162:1-163:94" name="RepeatIsValid" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="405">
               <a:s>define function RepeatIsValid(repeat Tuple{frequency System.Integer,period System.Decimal,periodUnit System.String}):
  </a:s>
               <a:s r="990">
                  <a:s r="990">
                     <a:s r="991">
                        <a:s r="995">
                           <a:s r="993">
                              <a:s r="992">
                                 <a:s>repeat</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="993">
                                 <a:s>frequency</a:s>
                              </a:s>
                           </a:s>
                           <a:s> is not null</a:s>
                        </a:s>
                        <a:s> and </a:s>
                        <a:s r="999">
                           <a:s r="997">
                              <a:s r="996">
                                 <a:s>repeat</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="997">
                                 <a:s>period</a:s>
                              </a:s>
                           </a:s>
                           <a:s> is not null</a:s>
                        </a:s>
                     </a:s>
                     <a:s> and </a:s>
                     <a:s r="1003">
                        <a:s r="1001">
                           <a:s r="1000">
                              <a:s>repeat</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="1001">
                              <a:s>periodUnit</a:s>
                           </a:s>
                        </a:s>
                        <a:s> is not null</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="990" locator="163:3-163:94" xsi:type="And">
            <operand localId="991" locator="163:3-163:60" xsi:type="And">
               <operand localId="995" locator="163:3-163:30" xsi:type="Not">
                  <operand localId="994" locator="163:3-163:30" xsi:type="IsNull">
                     <operand localId="993" locator="163:3-163:18" path="frequency" xsi:type="Property">
                        <source localId="992" locator="163:3-163:8" name="repeat" xsi:type="OperandRef"/>
                     </operand>
                  </operand>
               </operand>
               <operand localId="999" locator="163:36-163:60" xsi:type="Not">
                  <operand localId="998" locator="163:36-163:60" xsi:type="IsNull">
                     <operand localId="997" locator="163:36-163:48" path="period" xsi:type="Property">
                        <source localId="996" locator="163:36-163:41" name="repeat" xsi:type="OperandRef"/>
                     </operand>
                  </operand>
               </operand>
            </operand>
            <operand localId="1003" locator="163:66-163:94" xsi:type="Not">
               <operand localId="1002" locator="163:66-163:94" xsi:type="IsNull">
                  <operand localId="1001" locator="163:66-163:82" path="periodUnit" xsi:type="Property">
                     <source localId="1000" locator="163:66-163:71" name="repeat" xsi:type="OperandRef"/>
                  </operand>
               </operand>
            </operand>
         </expression>
         <operand localId="413" name="repeat">
            <operandTypeSpecifier localId="406" locator="162:38-162:115" xsi:type="TupleTypeSpecifier">
               <element localId="407" locator="162:44-162:67" name="frequency">
                  <elementType localId="408" locator="162:54-162:67" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
               </element>
               <element localId="409" locator="162:69-162:89" name="period">
                  <elementType localId="410" locator="162:76-162:89" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
               </element>
               <element localId="411" locator="162:91-162:114" name="periodUnit">
                  <elementType localId="412" locator="162:102-162:114" name="t:String" xsi:type="NamedTypeSpecifier"/>
               </element>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="456" locator="165:1-170:3" name="AddIntervalToDateTime" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="456">
               <a:s>define function AddIntervalToDateTime(startDateTime System.DateTime, 
    repeat Tuple{frequency System.Integer,period System.Decimal,periodUnit System.String}):
  </a:s>
               <a:s r="1004">
                  <a:s r="1004">
                     <a:s r="1005">
                        <a:s>startDateTime</a:s>
                     </a:s>
                     <a:s> + </a:s>
                     <a:s r="1006">
                        <a:s>System.Quantity {
    </a:s>
                        <a:s>
                           <a:s>value: </a:s>
                           <a:s r="1008">
                              <a:s r="1009">
                                 <a:s>(</a:s>
                                 <a:s r="1009">
                                    <a:s r="1011">
                                       <a:s r="1010">
                                          <a:s>repeat</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="1011">
                                          <a:s>frequency</a:s>
                                       </a:s>
                                    </a:s>
                                    <a:s> * </a:s>
                                    <a:s r="1013">
                                       <a:s r="1012">
                                          <a:s>repeat</a:s>
                                       </a:s>
                                       <a:s>.</a:s>
                                       <a:s r="1013">
                                          <a:s>period</a:s>
                                       </a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                              <a:s r="1019"> * 1.0</a:s>
                           </a:s>
                        </a:s>
                        <a:s>,
    </a:s>
                        <a:s>
                           <a:s>unit: </a:s>
                           <a:s r="1025">
                              <a:s r="1022">
                                 <a:s>FHIRHelpers</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="1025">
                                 <a:s>ToCalendarUnit(</a:s>
                                 <a:s r="1024">
                                    <a:s r="1023">
                                       <a:s>repeat</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="1024">
                                       <a:s>periodUnit</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s>
  }</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1004" locator="167:3-170:3" xsi:type="Add">
            <signature localId="1026" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
            <signature localId="1027" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
            <operand localId="1005" locator="167:3-167:15" name="startDateTime" xsi:type="OperandRef"/>
            <operand localId="1006" locator="167:19-170:3" classType="t:Quantity" xsi:type="Instance">
               <element name="value">
                  <value localId="1008" locator="168:12-168:51" xsi:type="Multiply">
                     <signature localId="1020" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
                     <signature localId="1021" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
                     <operand localId="1009" locator="168:12-168:45" xsi:type="Multiply">
                        <signature localId="1017" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
                        <signature localId="1018" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
                        <operand localId="1015" xsi:type="ToDecimal">
                           <signature localId="1016" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                           <operand localId="1011" locator="168:13-168:28" path="frequency" xsi:type="Property">
                              <source localId="1010" locator="168:13-168:18" name="repeat" xsi:type="OperandRef"/>
                           </operand>
                        </operand>
                        <operand localId="1013" locator="168:32-168:44" path="period" xsi:type="Property">
                           <source localId="1012" locator="168:32-168:37" name="repeat" xsi:type="OperandRef"/>
                        </operand>
                     </operand>
                     <operand localId="1019" locator="168:49-168:51" valueType="t:Decimal" value="1.0" xsi:type="Literal"/>
                  </value>
               </element>
               <element name="unit">
                  <value localId="1025" locator="169:11-169:55" name="ToCalendarUnit" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand localId="1024" locator="169:38-169:54" path="periodUnit" xsi:type="Property">
                        <source localId="1023" locator="169:38-169:43" name="repeat" xsi:type="OperandRef"/>
                     </operand>
                  </value>
               </element>
            </operand>
         </expression>
         <operand localId="458" name="startDateTime">
            <operandTypeSpecifier localId="457" locator="165:53-165:67" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
         </operand>
         <operand localId="466" name="repeat">
            <operandTypeSpecifier localId="459" locator="166:12-166:89" xsi:type="TupleTypeSpecifier">
               <element localId="460" locator="166:18-166:41" name="frequency">
                  <elementType localId="461" locator="166:28-166:41" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
               </element>
               <element localId="462" locator="166:43-166:63" name="period">
                  <elementType localId="463" locator="166:50-166:63" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
               </element>
               <element localId="464" locator="166:65-166:88" name="periodUnit">
                  <elementType localId="465" locator="166:76-166:88" name="t:String" xsi:type="NamedTypeSpecifier"/>
               </element>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="647" locator="220:1-226:13" name="EvaluateFlagDefault" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="647">
               <a:s>define function EvaluateFlagDefault(nextDueDate DateTime):
  </a:s>
               <a:s r="1381">
                  <a:s r="1381">
                     <a:s>if </a:s>
                     <a:s r="1382">
                        <a:s r="1383">
                           <a:s>nextDueDate</a:s>
                        </a:s>
                        <a:s> &lt; </a:s>
                        <a:s r="1384">
                           <a:s r="1387">
                              <a:s>Today()</a:s>
                           </a:s>
                           <a:s> - </a:s>
                           <a:s r="1388">
                              <a:s>(</a:s>
                              <a:s r="1388">
                                 <a:s>OverdueDefault</a:s>
                              </a:s>
                              <a:s>)</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s> then
    </a:s>
                     <a:s r="1396">
                        <a:s>&quot;OVERDUE&quot;</a:s>
                     </a:s>
                     <a:s>
  else </a:s>
                     <a:s r="1397">
                        <a:s>if </a:s>
                        <a:s r="1398">
                           <a:s r="1399">
                              <a:s r="1400">
                                 <a:s>nextDueDate</a:s>
                              </a:s>
                              <a:s> &lt;= </a:s>
                              <a:s r="1401">
                                 <a:s r="1404">
                                    <a:s>Today()</a:s>
                                 </a:s>
                                 <a:s> + </a:s>
                                 <a:s r="1405">
                                    <a:s>(</a:s>
                                    <a:s r="1405">
                                       <a:s>DueDefault</a:s>
                                    </a:s>
                                    <a:s>)</a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                           <a:s> and </a:s>
                           <a:s r="1413">
                              <a:s r="1414">
                                 <a:s>nextDueDate</a:s>
                              </a:s>
                              <a:s> >= </a:s>
                              <a:s r="1415">
                                 <a:s r="1418">
                                    <a:s>Today()</a:s>
                                 </a:s>
                                 <a:s> - </a:s>
                                 <a:s r="1419">
                                    <a:s>(</a:s>
                                    <a:s r="1419">
                                       <a:s>OverdueDefault</a:s>
                                    </a:s>
                                    <a:s>)</a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s> then
    </a:s>
                        <a:s r="1427">
                           <a:s>&quot;DUE&quot;</a:s>
                        </a:s>
                        <a:s>
  else
    </a:s>
                        <a:s r="1428">
                           <a:s>&quot;NOT DUE&quot;</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1381" locator="221:3-226:13" xsi:type="If">
            <condition localId="1382" locator="221:6-221:45" xsi:type="Less">
               <signature localId="1394" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
               <signature localId="1395" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
               <operand localId="1383" locator="221:6-221:16" name="nextDueDate" xsi:type="OperandRef"/>
               <operand localId="1392" xsi:type="ToDateTime">
                  <signature localId="1393" name="t:Date" xsi:type="NamedTypeSpecifier"/>
                  <operand localId="1384" locator="221:20-221:45" xsi:type="Subtract">
                     <signature localId="1389" name="t:Date" xsi:type="NamedTypeSpecifier"/>
                     <signature localId="1390" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
                     <operand localId="1387" locator="221:20-221:26" xsi:type="Today"/>
                     <operand localId="1388" locator="221:30-221:45" name="OverdueDefault" xsi:type="ParameterRef"/>
                  </operand>
               </operand>
            </condition>
            <then localId="1396" locator="222:5-222:13" name="OVERDUE" xsi:type="CodeRef"/>
            <else localId="1397" locator="223:8-226:13" xsi:type="If">
               <condition localId="1398" locator="223:11-223:93" xsi:type="And">
                  <operand localId="1399" locator="223:11-223:47" xsi:type="LessOrEqual">
                     <signature localId="1411" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
                     <signature localId="1412" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
                     <operand localId="1400" locator="223:11-223:21" name="nextDueDate" xsi:type="OperandRef"/>
                     <operand localId="1409" xsi:type="ToDateTime">
                        <signature localId="1410" name="t:Date" xsi:type="NamedTypeSpecifier"/>
                        <operand localId="1401" locator="223:26-223:47" xsi:type="Add">
                           <signature localId="1406" name="t:Date" xsi:type="NamedTypeSpecifier"/>
                           <signature localId="1407" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
                           <operand localId="1404" locator="223:26-223:32" xsi:type="Today"/>
                           <operand localId="1405" locator="223:36-223:47" name="DueDefault" xsi:type="ParameterRef"/>
                        </operand>
                     </operand>
                  </operand>
                  <operand localId="1413" locator="223:53-223:93" xsi:type="GreaterOrEqual">
                     <signature localId="1425" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
                     <signature localId="1426" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
                     <operand localId="1414" locator="223:53-223:63" name="nextDueDate" xsi:type="OperandRef"/>
                     <operand localId="1423" xsi:type="ToDateTime">
                        <signature localId="1424" name="t:Date" xsi:type="NamedTypeSpecifier"/>
                        <operand localId="1415" locator="223:68-223:93" xsi:type="Subtract">
                           <signature localId="1420" name="t:Date" xsi:type="NamedTypeSpecifier"/>
                           <signature localId="1421" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
                           <operand localId="1418" locator="223:68-223:74" xsi:type="Today"/>
                           <operand localId="1419" locator="223:78-223:93" name="OverdueDefault" xsi:type="ParameterRef"/>
                        </operand>
                     </operand>
                  </operand>
               </condition>
               <then localId="1427" locator="224:5-224:9" name="DUE" xsi:type="CodeRef"/>
               <else localId="1428" locator="226:5-226:13" name="NOT DUE" xsi:type="CodeRef"/>
            </else>
         </expression>
         <operand localId="649" name="nextDueDate">
            <operandTypeSpecifier localId="648" locator="220:49-220:56" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="722" locator="91:1-113:3" name="SetFollowupRecommendation" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="722">
               <a:s>define function SetFollowupRecommendation(          
    code System.Code,
    reason System.Code,
    documentation Tuple{label System.String},
    event System.DateTime)
    returns Tuple {code System.Code,reason System.Code,documentation Tuple{label System.String},
      timingTiming Tuple{event List&lt;System.String>},
      flag System.Code
    }: 
  </a:s>
               <a:s r="823">
                  <a:s r="823">
                     <a:s>
                        <a:s r="749">
                           <a:s r="750">
                              <a:s>
                                 <a:s>code</a:s>
                              </a:s>
                           </a:s>
                           <a:s> C</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
  </a:s>
                     <a:s>
                        <a:s>let </a:s>
                        <a:s r="751">
                           <a:s>nextdue: </a:s>
                           <a:s r="752">
                              <a:s>event</a:s>
                           </a:s>
                        </a:s>
                        <a:s>,
  </a:s>
                        <a:s r="753">
                           <a:s>timingTiming: </a:s>
                           <a:s r="754">
                              <a:s>{
      </a:s>
                              <a:s>
                                 <a:s>event: </a:s>
                                 <a:s r="755">
                                    <a:s>{</a:s>
                                    <a:s r="760">
                                       <a:s>ToString(</a:s>
                                       <a:s r="756">
                                          <a:s>nextdue</a:s>
                                       </a:s>
                                       <a:s>)</a:s>
                                    </a:s>
                                    <a:s>}</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>
    }</a:s>
                           </a:s>
                        </a:s>
                        <a:s>,
  </a:s>
                        <a:s r="762">
                           <a:s>flag: </a:s>
                           <a:s r="767">
                              <a:s>EvaluateFollowupFlag(</a:s>
                              <a:s r="763">
                                 <a:s>nextdue</a:s>
                              </a:s>
                              <a:s>)</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s>    
  </a:s>
                     <a:s r="816">
                        <a:s>return      
  </a:s>
                        <a:s r="817">
                           <a:s>Tuple {
    </a:s>
                           <a:s>
                              <a:s>code: </a:s>
                              <a:s r="818">
                                 <a:s>C</a:s>
                              </a:s>
                           </a:s>
                           <a:s>,
    </a:s>
                           <a:s>
                              <a:s>reason: </a:s>
                              <a:s r="819">
                                 <a:s>reason</a:s>
                              </a:s>
                           </a:s>
                           <a:s>,
    </a:s>
                           <a:s>
                              <a:s>documentation: </a:s>
                              <a:s r="820">
                                 <a:s>documentation</a:s>
                              </a:s>
                           </a:s>
                           <a:s>,
    </a:s>
                           <a:s>
                              <a:s>timingTiming: </a:s>
                              <a:s r="821">
                                 <a:s>timingTiming</a:s>
                              </a:s>
                           </a:s>
                           <a:s>,
    </a:s>
                           <a:s>
                              <a:s>flag: </a:s>
                              <a:s r="822">
                                 <a:s>flag</a:s>
                              </a:s>
                           </a:s>
                           <a:s>
  }</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="823" locator="100:3-113:3" xsi:type="Query">
            <source localId="749" locator="100:3-100:8" alias="C">
               <expression localId="750" locator="100:3-100:6" name="code" xsi:type="OperandRef"/>
            </source>
            <let localId="751" locator="101:7-101:20" identifier="nextdue">
               <expression localId="752" locator="101:16-101:20" name="event" xsi:type="OperandRef"/>
            </let>
            <let localId="753" locator="102:3-104:5" identifier="timingTiming">
               <expression localId="754" locator="102:17-104:5" xsi:type="Tuple">
                  <element name="event">
                     <value localId="755" locator="103:14-103:32" xsi:type="List">
                        <element localId="760" locator="103:15-103:31" xsi:type="ToString">
                           <signature localId="761" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
                           <operand localId="756" locator="103:24-103:30" name="nextdue" xsi:type="QueryLetRef"/>
                        </element>
                     </value>
                  </element>
               </expression>
            </let>
            <let localId="762" locator="105:3-105:37" identifier="flag">
               <expression localId="767" locator="105:9-105:37" name="EvaluateFollowupFlag" xsi:type="FunctionRef">
                  <operand localId="763" locator="105:30-105:36" name="nextdue" xsi:type="QueryLetRef"/>
               </expression>
            </let>
            <return localId="816" locator="106:3-113:3">
               <expression localId="817" locator="107:3-113:3" xsi:type="Tuple">
                  <element name="code">
                     <value localId="818" locator="108:11" name="C" xsi:type="AliasRef"/>
                  </element>
                  <element name="reason">
                     <value localId="819" locator="109:13-109:18" name="reason" xsi:type="OperandRef"/>
                  </element>
                  <element name="documentation">
                     <value localId="820" locator="110:20-110:32" name="documentation" xsi:type="OperandRef"/>
                  </element>
                  <element name="timingTiming">
                     <value localId="821" locator="111:19-111:30" name="timingTiming" xsi:type="QueryLetRef"/>
                  </element>
                  <element name="flag">
                     <value localId="822" locator="112:11-112:14" name="flag" xsi:type="QueryLetRef"/>
                  </element>
               </expression>
            </return>
         </expression>
         <operand localId="724" name="code">
            <operandTypeSpecifier localId="723" locator="92:10-92:20" name="t:Code" xsi:type="NamedTypeSpecifier"/>
         </operand>
         <operand localId="726" name="reason">
            <operandTypeSpecifier localId="725" locator="93:12-93:22" name="t:Code" xsi:type="NamedTypeSpecifier"/>
         </operand>
         <operand localId="730" name="documentation">
            <operandTypeSpecifier localId="727" locator="94:19-94:44" xsi:type="TupleTypeSpecifier">
               <element localId="728" locator="94:25-94:43" name="label">
                  <elementType localId="729" locator="94:31-94:43" name="t:String" xsi:type="NamedTypeSpecifier"/>
               </element>
            </operandTypeSpecifier>
         </operand>
         <operand localId="732" name="event">
            <operandTypeSpecifier localId="731" locator="95:11-95:25" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="764" locator="228:1-234:13" name="EvaluateFollowupFlag" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="764">
               <a:s>define function EvaluateFollowupFlag(nextDueDate DateTime):
  </a:s>
               <a:s r="1429">
                  <a:s r="1429">
                     <a:s>if </a:s>
                     <a:s r="1430">
                        <a:s r="1431">
                           <a:s>nextDueDate</a:s>
                        </a:s>
                        <a:s> &lt; </a:s>
                        <a:s r="1432">
                           <a:s r="1435">
                              <a:s>Today()</a:s>
                           </a:s>
                           <a:s> - </a:s>
                           <a:s r="1436">
                              <a:s>(</a:s>
                              <a:s r="1436">
                                 <a:s>OverdueFollowup</a:s>
                              </a:s>
                              <a:s>)</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s> then
    </a:s>
                     <a:s r="1444">
                        <a:s>&quot;OVERDUE&quot;</a:s>
                     </a:s>
                     <a:s>
  else </a:s>
                     <a:s r="1445">
                        <a:s>if </a:s>
                        <a:s r="1446">
                           <a:s r="1447">
                              <a:s r="1448">
                                 <a:s>nextDueDate</a:s>
                              </a:s>
                              <a:s> &lt;= </a:s>
                              <a:s r="1449">
                                 <a:s r="1452">
                                    <a:s>Today()</a:s>
                                 </a:s>
                                 <a:s> + </a:s>
                                 <a:s r="1453">
                                    <a:s>(</a:s>
                                    <a:s r="1453">
                                       <a:s>DueDefault</a:s>
                                    </a:s>
                                    <a:s>)</a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                           <a:s> and </a:s>
                           <a:s r="1461">
                              <a:s r="1462">
                                 <a:s>nextDueDate</a:s>
                              </a:s>
                              <a:s> >= </a:s>
                              <a:s r="1463">
                                 <a:s r="1466">
                                    <a:s>Today()</a:s>
                                 </a:s>
                                 <a:s> - </a:s>
                                 <a:s r="1467">
                                    <a:s>(</a:s>
                                    <a:s r="1467">
                                       <a:s>OverdueFollowup</a:s>
                                    </a:s>
                                    <a:s>)</a:s>
                                 </a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                        <a:s> then
    </a:s>
                        <a:s r="1475">
                           <a:s>&quot;DUE&quot;</a:s>
                        </a:s>
                        <a:s>
  else
    </a:s>
                        <a:s r="1476">
                           <a:s>&quot;NOT DUE&quot;</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1429" locator="229:3-234:13" xsi:type="If">
            <condition localId="1430" locator="229:6-229:46" xsi:type="Less">
               <signature localId="1442" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
               <signature localId="1443" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
               <operand localId="1431" locator="229:6-229:16" name="nextDueDate" xsi:type="OperandRef"/>
               <operand localId="1440" xsi:type="ToDateTime">
                  <signature localId="1441" name="t:Date" xsi:type="NamedTypeSpecifier"/>
                  <operand localId="1432" locator="229:20-229:46" xsi:type="Subtract">
                     <signature localId="1437" name="t:Date" xsi:type="NamedTypeSpecifier"/>
                     <signature localId="1438" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
                     <operand localId="1435" locator="229:20-229:26" xsi:type="Today"/>
                     <operand localId="1436" locator="229:30-229:46" name="OverdueFollowup" xsi:type="ParameterRef"/>
                  </operand>
               </operand>
            </condition>
            <then localId="1444" locator="230:5-230:13" name="OVERDUE" xsi:type="CodeRef"/>
            <else localId="1445" locator="231:8-234:13" xsi:type="If">
               <condition localId="1446" locator="231:11-231:94" xsi:type="And">
                  <operand localId="1447" locator="231:11-231:47" xsi:type="LessOrEqual">
                     <signature localId="1459" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
                     <signature localId="1460" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
                     <operand localId="1448" locator="231:11-231:21" name="nextDueDate" xsi:type="OperandRef"/>
                     <operand localId="1457" xsi:type="ToDateTime">
                        <signature localId="1458" name="t:Date" xsi:type="NamedTypeSpecifier"/>
                        <operand localId="1449" locator="231:26-231:47" xsi:type="Add">
                           <signature localId="1454" name="t:Date" xsi:type="NamedTypeSpecifier"/>
                           <signature localId="1455" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
                           <operand localId="1452" locator="231:26-231:32" xsi:type="Today"/>
                           <operand localId="1453" locator="231:36-231:47" name="DueDefault" xsi:type="ParameterRef"/>
                        </operand>
                     </operand>
                  </operand>
                  <operand localId="1461" locator="231:53-231:94" xsi:type="GreaterOrEqual">
                     <signature localId="1473" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
                     <signature localId="1474" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
                     <operand localId="1462" locator="231:53-231:63" name="nextDueDate" xsi:type="OperandRef"/>
                     <operand localId="1471" xsi:type="ToDateTime">
                        <signature localId="1472" name="t:Date" xsi:type="NamedTypeSpecifier"/>
                        <operand localId="1463" locator="231:68-231:94" xsi:type="Subtract">
                           <signature localId="1468" name="t:Date" xsi:type="NamedTypeSpecifier"/>
                           <signature localId="1469" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
                           <operand localId="1466" locator="231:68-231:74" xsi:type="Today"/>
                           <operand localId="1467" locator="231:78-231:94" name="OverdueFollowup" xsi:type="ParameterRef"/>
                        </operand>
                     </operand>
                  </operand>
               </condition>
               <then localId="1475" locator="232:5-232:9" name="DUE" xsi:type="CodeRef"/>
               <else localId="1476" locator="234:5-234:13" name="NOT DUE" xsi:type="CodeRef"/>
            </else>
         </expression>
         <operand localId="766" name="nextDueDate">
            <operandTypeSpecifier localId="765" locator="228:50-228:57" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1028" locator="176:1-189:5" name="EvaluateInterval" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1028">
               <a:s>//------------------------------------------------------------------------------
// scheduled frequency
//------------------------------------------------------------------------------

define function EvaluateInterval(repeat Choice&lt;FHIR.Timing.Repeat, Tuple{frequency System.Integer,period System.Decimal,periodUnit System.String}>):
  </a:s>
               <a:s r="1039">
                  <a:s r="1039">
                     <a:s>case
    </a:s>
                     <a:s r="1040">
                        <a:s>when </a:s>
                        <a:s r="1053">
                           <a:s>IntervalIsUnknown(</a:s>
                           <a:s r="1041">
                              <a:s>repeat</a:s>
                           </a:s>
                           <a:s>)</a:s>
                        </a:s>
                        <a:s>
      then </a:s>
                        <a:s r="1063">
                           <a:s>'Unknown'</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="1064">
                        <a:s>when </a:s>
                        <a:s r="1077">
                           <a:s>IntervalIsAnnual(</a:s>
                           <a:s r="1065">
                              <a:s>repeat</a:s>
                           </a:s>
                           <a:s>)</a:s>
                        </a:s>
                        <a:s>
      then </a:s>
                        <a:s r="1107">
                           <a:s>'Annual'</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="1108">
                        <a:s>when </a:s>
                        <a:s r="1121">
                           <a:s>IntervalIs3Years(</a:s>
                           <a:s r="1109">
                              <a:s>repeat</a:s>
                           </a:s>
                           <a:s>)</a:s>
                        </a:s>
                        <a:s>
      then </a:s>
                        <a:s r="1151">
                           <a:s>'3 years'</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="1152">
                        <a:s>when </a:s>
                        <a:s r="1165">
                           <a:s>IntervalIs5Years(</a:s>
                           <a:s r="1153">
                              <a:s>repeat</a:s>
                           </a:s>
                           <a:s>)</a:s>
                        </a:s>
                        <a:s>
      then </a:s>
                        <a:s r="1195">
                           <a:s>'5 years'</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    </a:s>
                     <a:s r="1196">
                        <a:s>when </a:s>
                        <a:s r="1209">
                           <a:s>IntervalIs10Years(</a:s>
                           <a:s r="1197">
                              <a:s>repeat</a:s>
                           </a:s>
                           <a:s>)</a:s>
                        </a:s>
                        <a:s>
      then </a:s>
                        <a:s r="1239">
                           <a:s>'10 years'</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
    else </a:s>
                     <a:s r="1240">
                        <a:s>'Other'</a:s>
                     </a:s>
                     <a:s>
  end</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1039" locator="177:3-189:5" xsi:type="Case">
            <caseItem localId="1040" locator="178:5-179:20">
               <when localId="1053" locator="178:10-178:34" name="IntervalIsUnknown" xsi:type="FunctionRef">
                  <operand localId="1041" locator="178:28-178:33" name="repeat" xsi:type="OperandRef"/>
               </when>
               <then localId="1063" locator="179:12-179:20" valueType="t:String" value="Unknown" xsi:type="Literal"/>
            </caseItem>
            <caseItem localId="1064" locator="180:5-181:19">
               <when localId="1077" locator="180:10-180:33" name="IntervalIsAnnual" xsi:type="FunctionRef">
                  <operand localId="1065" locator="180:27-180:32" name="repeat" xsi:type="OperandRef"/>
               </when>
               <then localId="1107" locator="181:12-181:19" valueType="t:String" value="Annual" xsi:type="Literal"/>
            </caseItem>
            <caseItem localId="1108" locator="182:5-183:20">
               <when localId="1121" locator="182:10-182:33" name="IntervalIs3Years" xsi:type="FunctionRef">
                  <operand localId="1109" locator="182:27-182:32" name="repeat" xsi:type="OperandRef"/>
               </when>
               <then localId="1151" locator="183:12-183:20" valueType="t:String" value="3 years" xsi:type="Literal"/>
            </caseItem>
            <caseItem localId="1152" locator="184:5-185:20">
               <when localId="1165" locator="184:10-184:33" name="IntervalIs5Years" xsi:type="FunctionRef">
                  <operand localId="1153" locator="184:27-184:32" name="repeat" xsi:type="OperandRef"/>
               </when>
               <then localId="1195" locator="185:12-185:20" valueType="t:String" value="5 years" xsi:type="Literal"/>
            </caseItem>
            <caseItem localId="1196" locator="186:5-187:21">
               <when localId="1209" locator="186:10-186:34" name="IntervalIs10Years" xsi:type="FunctionRef">
                  <operand localId="1197" locator="186:28-186:33" name="repeat" xsi:type="OperandRef"/>
               </when>
               <then localId="1239" locator="187:12-187:21" valueType="t:String" value="10 years" xsi:type="Literal"/>
            </caseItem>
            <else localId="1240" locator="188:10-188:16" valueType="t:String" value="Other" xsi:type="Literal"/>
         </expression>
         <operand localId="1038" name="repeat">
            <operandTypeSpecifier localId="1037" locator="176:41-176:146" xsi:type="ChoiceTypeSpecifier">
               <choice localId="1029" locator="176:48-176:65" name="fhir:Timing.Repeat" xsi:type="NamedTypeSpecifier"/>
               <choice localId="1030" locator="176:68-176:145" xsi:type="TupleTypeSpecifier">
                  <element localId="1031" locator="176:74-176:97" name="frequency">
                     <elementType localId="1032" locator="176:84-176:97" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                  </element>
                  <element localId="1033" locator="176:99-176:119" name="period">
                     <elementType localId="1034" locator="176:106-176:119" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
                  </element>
                  <element localId="1035" locator="176:121-176:144" name="periodUnit">
                     <elementType localId="1036" locator="176:132-176:144" name="t:String" xsi:type="NamedTypeSpecifier"/>
                  </element>
               </choice>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="1042" locator="207:2-209:22" name="IntervalIsUnknown" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1042">
               <a:s>define function IntervalIsUnknown(repeat Choice&lt;FHIR.Timing.Repeat, Tuple{frequency System.Integer,period System.Decimal,periodUnit System.String}>):
  </a:s>
               <a:s r="1357">
                  <a:s r="1357">
                     <a:s>if </a:s>
                     <a:s r="1358">
                        <a:s r="1360">
                           <a:s r="1359">
                              <a:s>repeat</a:s>
                           </a:s>
                           <a:s> is null</a:s>
                        </a:s>
                        <a:s> or </a:s>
                        <a:s r="1363">
                           <a:s r="1362">
                              <a:s r="1361">
                                 <a:s>repeat</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="1362">
                                 <a:s>frequency</a:s>
                              </a:s>
                           </a:s>
                           <a:s> is null</a:s>
                        </a:s>
                     </a:s>
                     <a:s r="1364">
  then true else false</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1357" locator="208:3-209:22" xsi:type="If">
            <condition localId="1358" locator="208:6-208:47" xsi:type="Or">
               <operand localId="1360" locator="208:6-208:19" xsi:type="IsNull">
                  <operand localId="1359" locator="208:6-208:11" name="repeat" xsi:type="OperandRef"/>
               </operand>
               <operand localId="1363" locator="208:24-208:47" xsi:type="IsNull">
                  <operand localId="1362" locator="208:24-208:39" path="frequency" xsi:type="Property">
                     <source localId="1361" locator="208:24-208:29" name="repeat" xsi:type="OperandRef"/>
                  </operand>
               </operand>
            </condition>
            <then localId="1364" locator="209:8-209:11" valueType="t:Boolean" value="true" xsi:type="Literal"/>
            <else localId="1365" locator="209:18-209:22" valueType="t:Boolean" value="false" xsi:type="Literal"/>
         </expression>
         <operand localId="1052" name="repeat">
            <operandTypeSpecifier localId="1051" locator="207:43-207:148" xsi:type="ChoiceTypeSpecifier">
               <choice localId="1043" locator="207:50-207:67" name="fhir:Timing.Repeat" xsi:type="NamedTypeSpecifier"/>
               <choice localId="1044" locator="207:70-207:147" xsi:type="TupleTypeSpecifier">
                  <element localId="1045" locator="207:76-207:99" name="frequency">
                     <elementType localId="1046" locator="207:86-207:99" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                  </element>
                  <element localId="1047" locator="207:101-207:121" name="period">
                     <elementType localId="1048" locator="207:108-207:121" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
                  </element>
                  <element localId="1049" locator="207:123-207:146" name="periodUnit">
                     <elementType localId="1050" locator="207:134-207:146" name="t:String" xsi:type="NamedTypeSpecifier"/>
                  </element>
               </choice>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="1066" locator="191:1-193:22" name="IntervalIsAnnual" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1066">
               <a:s>define function IntervalIsAnnual(repeat Choice&lt;FHIR.Timing.Repeat, Tuple{frequency System.Integer,period System.Decimal,periodUnit System.String}>):
  </a:s>
               <a:s r="1241">
                  <a:s r="1241">
                     <a:s>if </a:s>
                     <a:s r="1242">
                        <a:s r="1243">
                           <a:s r="1244">
                              <a:s r="1247">
                                 <a:s r="1246">
                                    <a:s r="1245">
                                       <a:s>repeat</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="1246">
                                       <a:s>frequency</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="1247">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                              <a:s r="1248"> = 1</a:s>
                           </a:s>
                           <a:s> and </a:s>
                           <a:s r="1251">
                              <a:s r="1254">
                                 <a:s r="1253">
                                    <a:s r="1252">
                                       <a:s>repeat</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="1253">
                                       <a:s>period</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="1254">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                              <a:s r="1255"> = 1</a:s>
                           </a:s>
                        </a:s>
                        <a:s> and </a:s>
                        <a:s r="1261">
                           <a:s r="1264">
                              <a:s r="1263">
                                 <a:s r="1262">
                                    <a:s>repeat</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="1263">
                                    <a:s>periodUnit</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="1264">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s> = </a:s>
                           <a:s r="1265">
                              <a:s>'a'</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s r="1268"> 
  then true else false</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1241" locator="192:3-193:22" xsi:type="If">
            <condition localId="1242" locator="192:6-192:93" xsi:type="And">
               <operand localId="1243" locator="192:6-192:59" xsi:type="And">
                  <operand localId="1244" locator="192:6-192:31" xsi:type="Equal">
                     <signature localId="1249" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                     <signature localId="1250" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                     <operand localId="1247" locator="192:6-192:27" path="value" xsi:type="Property">
                        <source localId="1246" locator="192:6-192:21" path="frequency" xsi:type="Property">
                           <source localId="1245" locator="192:6-192:11" name="repeat" xsi:type="OperandRef"/>
                        </source>
                     </operand>
                     <operand localId="1248" locator="192:31" valueType="t:Integer" value="1" xsi:type="Literal"/>
                  </operand>
                  <operand localId="1251" locator="192:37-192:59" xsi:type="Equal">
                     <signature localId="1259" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
                     <signature localId="1260" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
                     <operand localId="1254" locator="192:37-192:55" path="value" xsi:type="Property">
                        <source localId="1253" locator="192:37-192:49" path="period" xsi:type="Property">
                           <source localId="1252" locator="192:37-192:42" name="repeat" xsi:type="OperandRef"/>
                        </source>
                     </operand>
                     <operand localId="1257" xsi:type="ToDecimal">
                        <signature localId="1258" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                        <operand localId="1255" locator="192:59" valueType="t:Integer" value="1" xsi:type="Literal"/>
                     </operand>
                  </operand>
               </operand>
               <operand localId="1261" locator="192:65-192:93" xsi:type="Equal">
                  <signature localId="1266" name="t:String" xsi:type="NamedTypeSpecifier"/>
                  <signature localId="1267" name="t:String" xsi:type="NamedTypeSpecifier"/>
                  <operand localId="1264" locator="192:65-192:87" path="value" xsi:type="Property">
                     <source localId="1263" locator="192:65-192:81" path="periodUnit" xsi:type="Property">
                        <source localId="1262" locator="192:65-192:70" name="repeat" xsi:type="OperandRef"/>
                     </source>
                  </operand>
                  <operand localId="1265" locator="192:91-192:93" valueType="t:String" value="a" xsi:type="Literal"/>
               </operand>
            </condition>
            <then localId="1268" locator="193:8-193:11" valueType="t:Boolean" value="true" xsi:type="Literal"/>
            <else localId="1269" locator="193:18-193:22" valueType="t:Boolean" value="false" xsi:type="Literal"/>
         </expression>
         <operand localId="1076" name="repeat">
            <operandTypeSpecifier localId="1075" locator="191:41-191:146" xsi:type="ChoiceTypeSpecifier">
               <choice localId="1067" locator="191:48-191:65" name="fhir:Timing.Repeat" xsi:type="NamedTypeSpecifier"/>
               <choice localId="1068" locator="191:68-191:145" xsi:type="TupleTypeSpecifier">
                  <element localId="1069" locator="191:74-191:97" name="frequency">
                     <elementType localId="1070" locator="191:84-191:97" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                  </element>
                  <element localId="1071" locator="191:99-191:119" name="period">
                     <elementType localId="1072" locator="191:106-191:119" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
                  </element>
                  <element localId="1073" locator="191:121-191:144" name="periodUnit">
                     <elementType localId="1074" locator="191:132-191:144" name="t:String" xsi:type="NamedTypeSpecifier"/>
                  </element>
               </choice>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="1110" locator="195:1-197:22" name="IntervalIs3Years" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1110">
               <a:s>define function IntervalIs3Years(repeat Choice&lt;FHIR.Timing.Repeat, Tuple{frequency System.Integer,period System.Decimal,periodUnit System.String}>):
  </a:s>
               <a:s r="1270">
                  <a:s r="1270">
                     <a:s>if </a:s>
                     <a:s r="1271">
                        <a:s r="1272">
                           <a:s r="1273">
                              <a:s r="1276">
                                 <a:s r="1275">
                                    <a:s r="1274">
                                       <a:s>repeat</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="1275">
                                       <a:s>frequency</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="1276">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                              <a:s r="1277"> = 1</a:s>
                           </a:s>
                           <a:s> and </a:s>
                           <a:s r="1280">
                              <a:s r="1283">
                                 <a:s r="1282">
                                    <a:s r="1281">
                                       <a:s>repeat</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="1282">
                                       <a:s>period</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="1283">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                              <a:s r="1284"> = 3</a:s>
                           </a:s>
                        </a:s>
                        <a:s> and </a:s>
                        <a:s r="1290">
                           <a:s r="1293">
                              <a:s r="1292">
                                 <a:s r="1291">
                                    <a:s>repeat</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="1292">
                                    <a:s>periodUnit</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="1293">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s> = </a:s>
                           <a:s r="1294">
                              <a:s>'a'</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s r="1297"> 
  then true else false</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1270" locator="196:3-197:22" xsi:type="If">
            <condition localId="1271" locator="196:6-196:93" xsi:type="And">
               <operand localId="1272" locator="196:6-196:59" xsi:type="And">
                  <operand localId="1273" locator="196:6-196:31" xsi:type="Equal">
                     <signature localId="1278" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                     <signature localId="1279" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                     <operand localId="1276" locator="196:6-196:27" path="value" xsi:type="Property">
                        <source localId="1275" locator="196:6-196:21" path="frequency" xsi:type="Property">
                           <source localId="1274" locator="196:6-196:11" name="repeat" xsi:type="OperandRef"/>
                        </source>
                     </operand>
                     <operand localId="1277" locator="196:31" valueType="t:Integer" value="1" xsi:type="Literal"/>
                  </operand>
                  <operand localId="1280" locator="196:37-196:59" xsi:type="Equal">
                     <signature localId="1288" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
                     <signature localId="1289" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
                     <operand localId="1283" locator="196:37-196:55" path="value" xsi:type="Property">
                        <source localId="1282" locator="196:37-196:49" path="period" xsi:type="Property">
                           <source localId="1281" locator="196:37-196:42" name="repeat" xsi:type="OperandRef"/>
                        </source>
                     </operand>
                     <operand localId="1286" xsi:type="ToDecimal">
                        <signature localId="1287" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                        <operand localId="1284" locator="196:59" valueType="t:Integer" value="3" xsi:type="Literal"/>
                     </operand>
                  </operand>
               </operand>
               <operand localId="1290" locator="196:65-196:93" xsi:type="Equal">
                  <signature localId="1295" name="t:String" xsi:type="NamedTypeSpecifier"/>
                  <signature localId="1296" name="t:String" xsi:type="NamedTypeSpecifier"/>
                  <operand localId="1293" locator="196:65-196:87" path="value" xsi:type="Property">
                     <source localId="1292" locator="196:65-196:81" path="periodUnit" xsi:type="Property">
                        <source localId="1291" locator="196:65-196:70" name="repeat" xsi:type="OperandRef"/>
                     </source>
                  </operand>
                  <operand localId="1294" locator="196:91-196:93" valueType="t:String" value="a" xsi:type="Literal"/>
               </operand>
            </condition>
            <then localId="1297" locator="197:8-197:11" valueType="t:Boolean" value="true" xsi:type="Literal"/>
            <else localId="1298" locator="197:18-197:22" valueType="t:Boolean" value="false" xsi:type="Literal"/>
         </expression>
         <operand localId="1120" name="repeat">
            <operandTypeSpecifier localId="1119" locator="195:41-195:146" xsi:type="ChoiceTypeSpecifier">
               <choice localId="1111" locator="195:48-195:65" name="fhir:Timing.Repeat" xsi:type="NamedTypeSpecifier"/>
               <choice localId="1112" locator="195:68-195:145" xsi:type="TupleTypeSpecifier">
                  <element localId="1113" locator="195:74-195:97" name="frequency">
                     <elementType localId="1114" locator="195:84-195:97" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                  </element>
                  <element localId="1115" locator="195:99-195:119" name="period">
                     <elementType localId="1116" locator="195:106-195:119" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
                  </element>
                  <element localId="1117" locator="195:121-195:144" name="periodUnit">
                     <elementType localId="1118" locator="195:132-195:144" name="t:String" xsi:type="NamedTypeSpecifier"/>
                  </element>
               </choice>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="1154" locator="199:1-201:22" name="IntervalIs5Years" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1154">
               <a:s>define function IntervalIs5Years(repeat Choice&lt;FHIR.Timing.Repeat, Tuple{frequency System.Integer,period System.Decimal,periodUnit System.String}>):
  </a:s>
               <a:s r="1299">
                  <a:s r="1299">
                     <a:s>if </a:s>
                     <a:s r="1300">
                        <a:s r="1301">
                           <a:s r="1302">
                              <a:s r="1305">
                                 <a:s r="1304">
                                    <a:s r="1303">
                                       <a:s>repeat</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="1304">
                                       <a:s>frequency</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="1305">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                              <a:s r="1306"> = 1</a:s>
                           </a:s>
                           <a:s> and </a:s>
                           <a:s r="1309">
                              <a:s r="1312">
                                 <a:s r="1311">
                                    <a:s r="1310">
                                       <a:s>repeat</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="1311">
                                       <a:s>period</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="1312">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                              <a:s r="1313"> = 5</a:s>
                           </a:s>
                        </a:s>
                        <a:s> and </a:s>
                        <a:s r="1319">
                           <a:s r="1322">
                              <a:s r="1321">
                                 <a:s r="1320">
                                    <a:s>repeat</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="1321">
                                    <a:s>periodUnit</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="1322">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s> = </a:s>
                           <a:s r="1323">
                              <a:s>'a'</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s r="1326"> 
  then true else false</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1299" locator="200:3-201:22" xsi:type="If">
            <condition localId="1300" locator="200:6-200:93" xsi:type="And">
               <operand localId="1301" locator="200:6-200:59" xsi:type="And">
                  <operand localId="1302" locator="200:6-200:31" xsi:type="Equal">
                     <signature localId="1307" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                     <signature localId="1308" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                     <operand localId="1305" locator="200:6-200:27" path="value" xsi:type="Property">
                        <source localId="1304" locator="200:6-200:21" path="frequency" xsi:type="Property">
                           <source localId="1303" locator="200:6-200:11" name="repeat" xsi:type="OperandRef"/>
                        </source>
                     </operand>
                     <operand localId="1306" locator="200:31" valueType="t:Integer" value="1" xsi:type="Literal"/>
                  </operand>
                  <operand localId="1309" locator="200:37-200:59" xsi:type="Equal">
                     <signature localId="1317" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
                     <signature localId="1318" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
                     <operand localId="1312" locator="200:37-200:55" path="value" xsi:type="Property">
                        <source localId="1311" locator="200:37-200:49" path="period" xsi:type="Property">
                           <source localId="1310" locator="200:37-200:42" name="repeat" xsi:type="OperandRef"/>
                        </source>
                     </operand>
                     <operand localId="1315" xsi:type="ToDecimal">
                        <signature localId="1316" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                        <operand localId="1313" locator="200:59" valueType="t:Integer" value="5" xsi:type="Literal"/>
                     </operand>
                  </operand>
               </operand>
               <operand localId="1319" locator="200:65-200:93" xsi:type="Equal">
                  <signature localId="1324" name="t:String" xsi:type="NamedTypeSpecifier"/>
                  <signature localId="1325" name="t:String" xsi:type="NamedTypeSpecifier"/>
                  <operand localId="1322" locator="200:65-200:87" path="value" xsi:type="Property">
                     <source localId="1321" locator="200:65-200:81" path="periodUnit" xsi:type="Property">
                        <source localId="1320" locator="200:65-200:70" name="repeat" xsi:type="OperandRef"/>
                     </source>
                  </operand>
                  <operand localId="1323" locator="200:91-200:93" valueType="t:String" value="a" xsi:type="Literal"/>
               </operand>
            </condition>
            <then localId="1326" locator="201:8-201:11" valueType="t:Boolean" value="true" xsi:type="Literal"/>
            <else localId="1327" locator="201:18-201:22" valueType="t:Boolean" value="false" xsi:type="Literal"/>
         </expression>
         <operand localId="1164" name="repeat">
            <operandTypeSpecifier localId="1163" locator="199:41-199:146" xsi:type="ChoiceTypeSpecifier">
               <choice localId="1155" locator="199:48-199:65" name="fhir:Timing.Repeat" xsi:type="NamedTypeSpecifier"/>
               <choice localId="1156" locator="199:68-199:145" xsi:type="TupleTypeSpecifier">
                  <element localId="1157" locator="199:74-199:97" name="frequency">
                     <elementType localId="1158" locator="199:84-199:97" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                  </element>
                  <element localId="1159" locator="199:99-199:119" name="period">
                     <elementType localId="1160" locator="199:106-199:119" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
                  </element>
                  <element localId="1161" locator="199:121-199:144" name="periodUnit">
                     <elementType localId="1162" locator="199:132-199:144" name="t:String" xsi:type="NamedTypeSpecifier"/>
                  </element>
               </choice>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="1198" locator="203:1-205:22" name="IntervalIs10Years" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1198">
               <a:s>define function IntervalIs10Years(repeat Choice&lt;FHIR.Timing.Repeat, Tuple{frequency System.Integer,period System.Decimal,periodUnit System.String}>):
  </a:s>
               <a:s r="1328">
                  <a:s r="1328">
                     <a:s>if </a:s>
                     <a:s r="1329">
                        <a:s r="1330">
                           <a:s r="1331">
                              <a:s r="1334">
                                 <a:s r="1333">
                                    <a:s r="1332">
                                       <a:s>repeat</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="1333">
                                       <a:s>frequency</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="1334">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                              <a:s r="1335"> = 1</a:s>
                           </a:s>
                           <a:s> and </a:s>
                           <a:s r="1338">
                              <a:s r="1341">
                                 <a:s r="1340">
                                    <a:s r="1339">
                                       <a:s>repeat</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="1340">
                                       <a:s>period</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="1341">
                                    <a:s>value</a:s>
                                 </a:s>
                              </a:s>
                              <a:s r="1342"> = 10</a:s>
                           </a:s>
                        </a:s>
                        <a:s> and </a:s>
                        <a:s r="1348">
                           <a:s r="1351">
                              <a:s r="1350">
                                 <a:s r="1349">
                                    <a:s>repeat</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="1350">
                                    <a:s>periodUnit</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="1351">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s> = </a:s>
                           <a:s r="1352">
                              <a:s>'a'</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s r="1355"> 
  then true else false</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1328" locator="204:3-205:22" xsi:type="If">
            <condition localId="1329" locator="204:6-204:94" xsi:type="And">
               <operand localId="1330" locator="204:6-204:60" xsi:type="And">
                  <operand localId="1331" locator="204:6-204:31" xsi:type="Equal">
                     <signature localId="1336" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                     <signature localId="1337" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                     <operand localId="1334" locator="204:6-204:27" path="value" xsi:type="Property">
                        <source localId="1333" locator="204:6-204:21" path="frequency" xsi:type="Property">
                           <source localId="1332" locator="204:6-204:11" name="repeat" xsi:type="OperandRef"/>
                        </source>
                     </operand>
                     <operand localId="1335" locator="204:31" valueType="t:Integer" value="1" xsi:type="Literal"/>
                  </operand>
                  <operand localId="1338" locator="204:37-204:60" xsi:type="Equal">
                     <signature localId="1346" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
                     <signature localId="1347" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
                     <operand localId="1341" locator="204:37-204:55" path="value" xsi:type="Property">
                        <source localId="1340" locator="204:37-204:49" path="period" xsi:type="Property">
                           <source localId="1339" locator="204:37-204:42" name="repeat" xsi:type="OperandRef"/>
                        </source>
                     </operand>
                     <operand localId="1344" xsi:type="ToDecimal">
                        <signature localId="1345" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                        <operand localId="1342" locator="204:59-204:60" valueType="t:Integer" value="10" xsi:type="Literal"/>
                     </operand>
                  </operand>
               </operand>
               <operand localId="1348" locator="204:66-204:94" xsi:type="Equal">
                  <signature localId="1353" name="t:String" xsi:type="NamedTypeSpecifier"/>
                  <signature localId="1354" name="t:String" xsi:type="NamedTypeSpecifier"/>
                  <operand localId="1351" locator="204:66-204:88" path="value" xsi:type="Property">
                     <source localId="1350" locator="204:66-204:82" path="periodUnit" xsi:type="Property">
                        <source localId="1349" locator="204:66-204:71" name="repeat" xsi:type="OperandRef"/>
                     </source>
                  </operand>
                  <operand localId="1352" locator="204:92-204:94" valueType="t:String" value="a" xsi:type="Literal"/>
               </operand>
            </condition>
            <then localId="1355" locator="205:8-205:11" valueType="t:Boolean" value="true" xsi:type="Literal"/>
            <else localId="1356" locator="205:18-205:22" valueType="t:Boolean" value="false" xsi:type="Literal"/>
         </expression>
         <operand localId="1208" name="repeat">
            <operandTypeSpecifier localId="1207" locator="203:42-203:147" xsi:type="ChoiceTypeSpecifier">
               <choice localId="1199" locator="203:49-203:66" name="fhir:Timing.Repeat" xsi:type="NamedTypeSpecifier"/>
               <choice localId="1200" locator="203:69-203:146" xsi:type="TupleTypeSpecifier">
                  <element localId="1201" locator="203:75-203:98" name="frequency">
                     <elementType localId="1202" locator="203:85-203:98" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                  </element>
                  <element localId="1203" locator="203:100-203:120" name="period">
                     <elementType localId="1204" locator="203:107-203:120" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
                  </element>
                  <element localId="1205" locator="203:122-203:145" name="periodUnit">
                     <elementType localId="1206" locator="203:133-203:145" name="t:String" xsi:type="NamedTypeSpecifier"/>
                  </element>
               </choice>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="1366" locator="216:1-218:34" name="EvaluateFlag" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1366">
               <a:s>//------------------------------------------------------------------------------
// flag due/overdue
//------------------------------------------------------------------------------

//TODO: use grace periods should be function arguments
define function EvaluateFlag(repeat Choice&lt;FHIR.Timing.Repeat, Tuple{frequency System.Integer,period System.Decimal,periodUnit System.String}>, 
    nextDueDate DateTime):
  </a:s>
               <a:s r="1380">
                  <a:s r="1380">
                     <a:s>EvaluateFlagDefault(</a:s>
                     <a:s r="1379">
                        <a:s>nextDueDate</a:s>
                     </a:s>
                     <a:s>)</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1380" locator="218:3-218:34" name="EvaluateFlagDefault" xsi:type="FunctionRef">
            <operand localId="1379" locator="218:23-218:33" name="nextDueDate" xsi:type="OperandRef"/>
         </expression>
         <operand localId="1376" name="repeat">
            <operandTypeSpecifier localId="1375" locator="216:37-216:142" xsi:type="ChoiceTypeSpecifier">
               <choice localId="1367" locator="216:44-216:61" name="fhir:Timing.Repeat" xsi:type="NamedTypeSpecifier"/>
               <choice localId="1368" locator="216:64-216:141" xsi:type="TupleTypeSpecifier">
                  <element localId="1369" locator="216:70-216:93" name="frequency">
                     <elementType localId="1370" locator="216:80-216:93" name="t:Integer" xsi:type="NamedTypeSpecifier"/>
                  </element>
                  <element localId="1371" locator="216:95-216:115" name="period">
                     <elementType localId="1372" locator="216:102-216:115" name="t:Decimal" xsi:type="NamedTypeSpecifier"/>
                  </element>
                  <element localId="1373" locator="216:117-216:140" name="periodUnit">
                     <elementType localId="1374" locator="216:128-216:140" name="t:String" xsi:type="NamedTypeSpecifier"/>
                  </element>
               </choice>
            </operandTypeSpecifier>
         </operand>
         <operand localId="1378" name="nextDueDate">
            <operandTypeSpecifier localId="1377" locator="217:17-217:24" name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1477" locator="239:1-245:3" name="CreateExtension" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1477">
               <a:s>//------------------------------------------------------------------------------
// Create extension
//------------------------------------------------------------------------------
define function CreateExtension(url String, coding Code):
  </a:s>
               <a:s r="1482">
                  <a:s r="1482">
                     <a:s>{    
    </a:s>
                     <a:s>
                        <a:s>url: </a:s>
                        <a:s r="1483">
                           <a:s>url</a:s>
                        </a:s>
                     </a:s>
                     <a:s>,
    </a:s>
                     <a:s>
                        <a:s>valueCodeableConcept: </a:s>
                        <a:s r="1484">
                           <a:s>{
      </a:s>
                           <a:s>
                              <a:s>coding: </a:s>
                              <a:s r="1485">
                                 <a:s>{ </a:s>
                                 <a:s r="1486">
                                    <a:s>coding</a:s>
                                 </a:s>
                                 <a:s> }</a:s>
                              </a:s>
                           </a:s>
                           <a:s>
    }</a:s>
                        </a:s>
                     </a:s>
                     <a:s> 
  }</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1482" locator="240:3-245:3" xsi:type="Tuple">
            <element name="url">
               <value localId="1483" locator="241:10-241:12" name="url" xsi:type="OperandRef"/>
            </element>
            <element name="valueCodeableConcept">
               <value localId="1484" locator="242:27-244:5" xsi:type="Tuple">
                  <element name="coding">
                     <value localId="1485" locator="243:15-243:24" xsi:type="List">
                        <element localId="1486" locator="243:17-243:22" name="coding" xsi:type="OperandRef"/>
                     </value>
                  </element>
               </value>
            </element>
         </expression>
         <operand localId="1479" name="url">
            <operandTypeSpecifier localId="1478" locator="239:37-239:42" name="t:String" xsi:type="NamedTypeSpecifier"/>
         </operand>
         <operand localId="1481" name="coding">
            <operandTypeSpecifier localId="1480" locator="239:52-239:55" name="t:Code" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1487" locator="247:1-253:4" name="CreateRecommendationFlagExtension" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1487">
               <a:s>define function CreateRecommendationFlagExtension(coding Code):
  </a:s>
               <a:s r="1490">
                  <a:s r="1490">
                     <a:s>{</a:s>
                     <a:s r="1491">
                        <a:s>{    
    </a:s>
                        <a:s>
                           <a:s>url: </a:s>
                           <a:s r="1492">
                              <a:s>'http://cancerscreeningcds.github.io/crcsm-cds/StructureDefinition/csm-recommendation-flag'</a:s>
                           </a:s>
                        </a:s>
                        <a:s>,
    </a:s>
                        <a:s>
                           <a:s>valueCodeableConcept: </a:s>
                           <a:s r="1493">
                              <a:s>{
      </a:s>
                              <a:s>
                                 <a:s>coding: </a:s>
                                 <a:s r="1494">
                                    <a:s>{ </a:s>
                                    <a:s r="1495">
                                       <a:s>coding</a:s>
                                    </a:s>
                                    <a:s> }</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>
    }</a:s>
                           </a:s>
                        </a:s>
                        <a:s> 
  }</a:s>
                     </a:s>
                     <a:s>}</a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1490" locator="248:3-253:4" xsi:type="List">
            <element localId="1491" locator="248:4-253:3" xsi:type="Tuple">
               <element name="url">
                  <value localId="1492" locator="249:10-249:100" valueType="t:String" value="http://cancerscreeningcds.github.io/crcsm-cds/StructureDefinition/csm-recommendation-flag" xsi:type="Literal"/>
               </element>
               <element name="valueCodeableConcept">
                  <value localId="1493" locator="250:27-252:5" xsi:type="Tuple">
                     <element name="coding">
                        <value localId="1494" locator="251:15-251:24" xsi:type="List">
                           <element localId="1495" locator="251:17-251:22" name="coding" xsi:type="OperandRef"/>
                        </value>
                     </element>
                  </value>
               </element>
            </element>
         </expression>
         <operand localId="1489" name="coding">
            <operandTypeSpecifier localId="1488" locator="247:58-247:61" name="t:Code" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1500" locator="262:1-263:74" name="MostRecentDiagnosticReportByVS" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1500">
               <a:s>define function MostRecentDiagnosticReportByVS(vs System.ValueSet):
  </a:s>
               <a:s r="1518">
                  <a:s r="1518">
                     <a:s r="1503">
                        <a:s>CSMCommonFunctions</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1518">
                        <a:s>MostRecentDiagnosticReport(</a:s>
                        <a:s r="1508">
                           <a:s>DiagnosticReportsByVS(</a:s>
                           <a:s r="1504">
                              <a:s>vs</a:s>
                           </a:s>
                           <a:s>)</a:s>
                        </a:s>
                        <a:s>)</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1518" locator="263:3-263:74" name="MostRecentDiagnosticReport" libraryName="CSMCommonFunctions" xsi:type="FunctionRef">
            <operand localId="1508" locator="263:49-263:73" name="DiagnosticReportsByVS" xsi:type="FunctionRef">
               <operand localId="1504" locator="263:71-263:72" name="vs" xsi:type="OperandRef"/>
            </operand>
         </expression>
         <operand localId="1502" name="vs">
            <operandTypeSpecifier localId="1501" locator="262:51-262:65" name="t:ValueSet" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1505" locator="270:1-271:26" name="DiagnosticReportsByVS" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1505">
               <a:s>define function DiagnosticReportsByVS(vs System.ValueSet):
  </a:s>
               <a:s r="1537">
                  <a:s r="1537">
                     <a:s>
                        <a:s r="1529">
                           <a:s r="1532">
                              <a:s r="1532">
                                 <a:s>[DiagnosticReport: </a:s>
                                 <a:s>
                                    <a:s>vs</a:s>
                                 </a:s>
                                 <a:s>]</a:s>
                              </a:s>
                           </a:s>
                           <a:s> R</a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1537" locator="271:3-271:26" xsi:type="Query">
            <source localId="1529" locator="271:3-271:26" alias="R">
               <expression localId="1532" locator="271:3-271:24" dataType="fhir:DiagnosticReport" templateId="http://hl7.org/fhir/StructureDefinition/DiagnosticReport" codeProperty="code" codeComparator="in" xsi:type="Retrieve"/>
            </source>
         </expression>
         <operand localId="1507" name="vs">
            <operandTypeSpecifier localId="1506" locator="270:42-270:56" name="t:ValueSet" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1538" locator="274:1-280:3" name="CompletedDiagnosticReportsByLookback" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1538">
               <a:s>// Returns list of completed diagnostic reports matching code in a given lookback period
define function CompletedDiagnosticReportsByLookback(term Concept, lookback System.Quantity):
  </a:s>
               <a:s r="1552">
                  <a:s r="1552">
                     <a:s r="1543">
                        <a:s>CSMCommonFunctions</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1552">
                        <a:s>CompletedDiagnosticReport(
    </a:s>
                        <a:s r="1548">
                           <a:s r="1544">
                              <a:s>CSMCommonFunctions</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="1548">
                              <a:s>LookBack(
      </a:s>
                              <a:s r="1546">
                                 <a:s>DiagnosticReportsByCode(</a:s>
                                 <a:s r="1545">
                                    <a:s>term</a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                              <a:s>,
    </a:s>
                              <a:s r="1547">
                                 <a:s>lookback</a:s>
                              </a:s>
                              <a:s>
    )</a:s>
                           </a:s>
                        </a:s>
                        <a:s>
  )</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1552" locator="275:3-280:3" name="CompletedDiagnosticReport" libraryName="CSMCommonFunctions" xsi:type="FunctionRef">
            <operand localId="1548" locator="276:5-279:5" name="LookBack" libraryName="CSMCommonFunctions" xsi:type="FunctionRef">
               <signature localId="1549" xsi:type="ListTypeSpecifier">
                  <elementType localId="1550" name="fhir:DiagnosticReport" xsi:type="NamedTypeSpecifier"/>
               </signature>
               <signature localId="1551" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
               <operand localId="1546" locator="277:7-277:35" name="DiagnosticReportsByCode" xsi:type="FunctionRef">
                  <operand localId="1545" locator="277:31-277:34" name="term" xsi:type="OperandRef"/>
               </operand>
               <operand localId="1547" locator="278:5-278:12" name="lookback" xsi:type="OperandRef"/>
            </operand>
         </expression>
         <operand localId="1540" name="term">
            <operandTypeSpecifier localId="1539" locator="274:59-274:65" name="t:Concept" xsi:type="NamedTypeSpecifier"/>
         </operand>
         <operand localId="1542" name="lookback">
            <operandTypeSpecifier localId="1541" locator="274:77-274:91" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1553" locator="283:1-289:3" name="CompletedDiagnosticReportsByLookback" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1553">
               <a:s>// Returns list of completed diagnostic reports matching value set in a given lookback period
define function CompletedDiagnosticReportsByLookback(vs System.ValueSet, lookback System.Quantity):
  </a:s>
               <a:s r="1567">
                  <a:s r="1567">
                     <a:s r="1558">
                        <a:s>CSMCommonFunctions</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1567">
                        <a:s>CompletedDiagnosticReport(
    </a:s>
                        <a:s r="1563">
                           <a:s r="1559">
                              <a:s>CSMCommonFunctions</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="1563">
                              <a:s>LookBack(
      </a:s>
                              <a:s r="1561">
                                 <a:s>DiagnosticReportsByVS(</a:s>
                                 <a:s r="1560">
                                    <a:s>vs</a:s>
                                 </a:s>
                                 <a:s>)</a:s>
                              </a:s>
                              <a:s>,
    </a:s>
                              <a:s r="1562">
                                 <a:s>lookback</a:s>
                              </a:s>
                              <a:s>
    )</a:s>
                           </a:s>
                        </a:s>
                        <a:s>
  )</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1567" locator="284:3-289:3" name="CompletedDiagnosticReport" libraryName="CSMCommonFunctions" xsi:type="FunctionRef">
            <operand localId="1563" locator="285:5-288:5" name="LookBack" libraryName="CSMCommonFunctions" xsi:type="FunctionRef">
               <signature localId="1564" xsi:type="ListTypeSpecifier">
                  <elementType localId="1565" name="fhir:DiagnosticReport" xsi:type="NamedTypeSpecifier"/>
               </signature>
               <signature localId="1566" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
               <operand localId="1561" locator="286:7-286:31" name="DiagnosticReportsByVS" xsi:type="FunctionRef">
                  <operand localId="1560" locator="286:29-286:30" name="vs" xsi:type="OperandRef"/>
               </operand>
               <operand localId="1562" locator="287:5-287:12" name="lookback" xsi:type="OperandRef"/>
            </operand>
         </expression>
         <operand localId="1555" name="vs">
            <operandTypeSpecifier localId="1554" locator="283:57-283:71" name="t:ValueSet" xsi:type="NamedTypeSpecifier"/>
         </operand>
         <operand localId="1557" name="lookback">
            <operandTypeSpecifier localId="1556" locator="283:83-283:97" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1568" locator="302:1-308:3" name="VerifiedObservations" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1568">
               <a:s>//define function DiagnosticReportResultsByModality(DiagnosticReportList List&lt;FHIR.DiagnosticReport>, ObsList List&lt;FHIR.Observation>, modality System.ValueSet, result System.ValueSet):
//  DiagnosticReportList D
//    where
//      D.code in modality
//  and AnyTrue(CollateConclusionCodes(D, ObsList) C return C in result)

//------------------------------------------------------------------------------
// Observation Functions
//------------------------------------------------------------------------------

// Returns list of verified observations matching a direct reference code in a given lookback period
define function VerifiedObservations(term Concept, lookback System.Quantity):
  </a:s>
               <a:s r="1587">
                  <a:s r="1587">
                     <a:s r="1573">
                        <a:s>C3F</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1587">
                        <a:s>Verified(
    </a:s>
                        <a:s r="1586">
                           <a:s r="1574">
                              <a:s>C3F</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="1586">
                              <a:s>ObservationLookBack(
      </a:s>
                              <a:s r="1584">
                                 <a:s>
                                    <a:s r="1575">
                                       <a:s r="1576">
                                          <a:s r="1576">
                                             <a:s>[Observation]</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s> O</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> </a:s>
                                 <a:s r="1577">
                                    <a:s>where </a:s>
                                    <a:s r="1577">
                                       <a:s r="1579">
                                          <a:s r="1578">
                                             <a:s>O</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="1579">
                                             <a:s>code</a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s> ~ </a:s>
                                       <a:s r="1580">
                                          <a:s>term</a:s>
                                       </a:s>
                                    </a:s>
                                 </a:s>
                              </a:s>
                              <a:s>,
    </a:s>
                              <a:s r="1585">
                                 <a:s>lookback</a:s>
                              </a:s>
                              <a:s>
    )</a:s>
                           </a:s>
                        </a:s>
                        <a:s>
  )</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1587" locator="303:3-308:3" name="Verified" libraryName="C3F" xsi:type="FunctionRef">
            <operand localId="1586" locator="304:5-307:5" name="ObservationLookBack" libraryName="C3F" xsi:type="FunctionRef">
               <operand localId="1584" locator="305:7-305:41" xsi:type="Query">
                  <source localId="1575" locator="305:7-305:21" alias="O">
                     <expression localId="1576" locator="305:7-305:19" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" xsi:type="Retrieve"/>
                  </source>
                  <where localId="1577" locator="305:23-305:41" xsi:type="Equivalent">
                     <signature localId="1582" name="t:Concept" xsi:type="NamedTypeSpecifier"/>
                     <signature localId="1583" name="t:Concept" xsi:type="NamedTypeSpecifier"/>
                     <operand localId="1581" name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand localId="1579" locator="305:29-305:34" path="code" scope="O" xsi:type="Property"/>
                     </operand>
                     <operand localId="1580" locator="305:38-305:41" name="term" xsi:type="OperandRef"/>
                  </where>
               </operand>
               <operand localId="1585" locator="306:5-306:12" name="lookback" xsi:type="OperandRef"/>
            </operand>
         </expression>
         <operand localId="1570" name="term">
            <operandTypeSpecifier localId="1569" locator="302:43-302:49" name="t:Concept" xsi:type="NamedTypeSpecifier"/>
         </operand>
         <operand localId="1572" name="lookback">
            <operandTypeSpecifier localId="1571" locator="302:61-302:75" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1588" locator="311:1-317:5" name="VerifiedObservations" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1588">
               <a:s>// Returns list of verified observations matching a value set in a given lookback period
define function VerifiedObservations(vs System.ValueSet, lookback System.Quantity):
    </a:s>
               <a:s r="1604">
                  <a:s r="1604">
                     <a:s r="1593">
                        <a:s>C3F</a:s>
                     </a:s>
                     <a:s>.</a:s>
                     <a:s r="1604">
                        <a:s>Verified(
      </a:s>
                        <a:s r="1603">
                           <a:s r="1594">
                              <a:s>C3F</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="1603">
                              <a:s>ObservationLookBack(
        </a:s>
                              <a:s r="1597">
                                 <a:s>[Observation: </a:s>
                                 <a:s>
                                    <a:s>vs</a:s>
                                 </a:s>
                                 <a:s>]</a:s>
                              </a:s>
                              <a:s>,
      </a:s>
                              <a:s r="1602">
                                 <a:s>lookback</a:s>
                              </a:s>
                              <a:s>
      )</a:s>
                           </a:s>
                        </a:s>
                        <a:s>
    )</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1604" locator="312:5-317:5" name="Verified" libraryName="C3F" xsi:type="FunctionRef">
            <operand localId="1603" locator="313:7-316:7" name="ObservationLookBack" libraryName="C3F" xsi:type="FunctionRef">
               <operand localId="1597" locator="314:9-314:25" dataType="fhir:Observation" templateId="http://hl7.org/fhir/StructureDefinition/Observation" codeProperty="code" codeComparator="in" xsi:type="Retrieve"/>
               <operand localId="1602" locator="315:7-315:14" name="lookback" xsi:type="OperandRef"/>
            </operand>
         </expression>
         <operand localId="1590" name="vs">
            <operandTypeSpecifier localId="1589" locator="311:41-311:55" name="t:ValueSet" xsi:type="NamedTypeSpecifier"/>
         </operand>
         <operand localId="1592" name="lookback">
            <operandTypeSpecifier localId="1591" locator="311:67-311:81" name="t:Quantity" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1605" locator="325:1-328:99" name="ActiveServiceRequestOrders" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1605">
               <a:s>//------------------------------------------------------------------------------
// Service Request Functions
//------------------------------------------------------------------------------

//TODO: need for direct reference code?
define function ActiveServiceRequestOrders(vs System.ValueSet):
  </a:s>
               <a:s r="1635">
                  <a:s r="1635">
                     <a:s>
                        <a:s r="1608">
                           <a:s r="1611">
                              <a:s r="1611">
                                 <a:s>[ServiceRequest: </a:s>
                                 <a:s>
                                    <a:s>vs</a:s>
                                 </a:s>
                                 <a:s>]</a:s>
                              </a:s>
                           </a:s>
                           <a:s> O</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
      </a:s>
                     <a:s r="1616">
                        <a:s>where </a:s>
                        <a:s r="1616">
                           <a:s r="1621">
                              <a:s r="1618">
                                 <a:s r="1617">
                                    <a:s>O</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="1618">
                                    <a:s>status</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> in </a:s>
                              <a:s r="1619">
                                 <a:s>{</a:s>
                                 <a:s r="1620">
                                    <a:s>'active'</a:s>
                                 </a:s>
                                 <a:s>}</a:s>
                              </a:s>
                           </a:s>
                           <a:s>
      and </a:s>
                           <a:s r="1632">
                              <a:s r="1625">
                                 <a:s r="1624">
                                    <a:s>O</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="1625">
                                    <a:s>intent</a:s>
                                 </a:s>
                              </a:s>
                              <a:s> in </a:s>
                              <a:s r="1626">
                                 <a:s>{</a:s>
                                 <a:s r="1627">
                                    <a:s>'order'</a:s>
                                 </a:s>
                                 <a:s>, </a:s>
                                 <a:s r="1628">
                                    <a:s>'original-order'</a:s>
                                 </a:s>
                                 <a:s>, </a:s>
                                 <a:s r="1629">
                                    <a:s>'reflex-order'</a:s>
                                 </a:s>
                                 <a:s>, </a:s>
                                 <a:s r="1630">
                                    <a:s>'filler-order'</a:s>
                                 </a:s>
                                 <a:s>, </a:s>
                                 <a:s r="1631">
                                    <a:s>'instance-order'</a:s>
                                 </a:s>
                                 <a:s>}</a:s>
                              </a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1635" locator="326:3-328:99" xsi:type="Query">
            <source localId="1608" locator="326:3-326:24" alias="O">
               <expression localId="1611" locator="326:3-326:22" dataType="fhir:ServiceRequest" templateId="http://hl7.org/fhir/StructureDefinition/ServiceRequest" codeProperty="code" codeComparator="in" xsi:type="Retrieve"/>
            </source>
            <where localId="1616" locator="327:7-328:99" xsi:type="And">
               <operand localId="1621" locator="327:13-327:34" xsi:type="In">
                  <operand localId="1622" name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <signature localId="1623" name="fhir:ServiceRequestStatus" xsi:type="NamedTypeSpecifier"/>
                     <operand localId="1618" locator="327:13-327:20" path="status" scope="O" xsi:type="Property"/>
                  </operand>
                  <operand localId="1619" locator="327:25-327:34" xsi:type="List">
                     <element localId="1620" locator="327:26-327:33" valueType="t:String" value="active" xsi:type="Literal"/>
                  </operand>
               </operand>
               <operand localId="1632" locator="328:11-328:99" xsi:type="In">
                  <operand localId="1633" name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <signature localId="1634" name="fhir:ServiceRequestIntent" xsi:type="NamedTypeSpecifier"/>
                     <operand localId="1625" locator="328:11-328:18" path="intent" scope="O" xsi:type="Property"/>
                  </operand>
                  <operand localId="1626" locator="328:23-328:99" xsi:type="List">
                     <element localId="1627" locator="328:24-328:30" valueType="t:String" value="order" xsi:type="Literal"/>
                     <element localId="1628" locator="328:33-328:48" valueType="t:String" value="original-order" xsi:type="Literal"/>
                     <element localId="1629" locator="328:51-328:64" valueType="t:String" value="reflex-order" xsi:type="Literal"/>
                     <element localId="1630" locator="328:67-328:80" valueType="t:String" value="filler-order" xsi:type="Literal"/>
                     <element localId="1631" locator="328:83-328:98" valueType="t:String" value="instance-order" xsi:type="Literal"/>
                  </operand>
               </operand>
            </where>
         </expression>
         <operand localId="1607" name="vs">
            <operandTypeSpecifier localId="1606" locator="325:47-325:61" name="t:ValueSet" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1636" locator="340:1-344:37" name="CollateConclusionCodes" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1636">
               <a:s>//------------------------------------------------------------------------------
// Diagnostic report results
//------------------------------------------------------------------------------
// Aggregate result codes -
//  DiagnosticReport.conclusionCode[]
//  Observatio.value where DiagnosticReport.result[].reference = Observation
//  Observatio.value where Observation.basedOn = DiagnosticReport.basedOn (request)

// if a DiagnosticReport.code has target code, then call original CollateConclusionCodes
// if a DiagnosticReport.code does not have target code, then return values from matched Observations
define function CollateConclusionCodes(D DiagnosticReport, ObsList List&lt;Observation>, code System.Code):
  </a:s>
               <a:s r="1644">
                  <a:s r="1644">
                     <a:s>if </a:s>
                     <a:s r="1645">
                        <a:s r="1649">
                           <a:s r="1646">
                              <a:s>FHIRHelpers</a:s>
                           </a:s>
                           <a:s>.</a:s>
                           <a:s r="1649">
                              <a:s>ToConcept(</a:s>
                              <a:s r="1648">
                                 <a:s r="1647">
                                    <a:s>D</a:s>
                                 </a:s>
                                 <a:s>.</a:s>
                                 <a:s r="1648">
                                    <a:s>code</a:s>
                                 </a:s>
                              </a:s>
                              <a:s>)</a:s>
                           </a:s>
                        </a:s>
                        <a:s> ~ </a:s>
                        <a:s r="1650">
                           <a:s>code</a:s>
                        </a:s>
                     </a:s>
                     <a:s> then
    </a:s>
                     <a:s r="1664">
                        <a:s>CollateConclusionCodes(</a:s>
                        <a:s r="1656">
                           <a:s>D</a:s>
                        </a:s>
                        <a:s>, </a:s>
                        <a:s r="1657">
                           <a:s>ObsList</a:s>
                        </a:s>
                        <a:s>)</a:s>
                     </a:s>
                     <a:s>
  else
    </a:s>
                     <a:s r="1735">
                        <a:s>ValuesFromObservation(</a:s>
                        <a:s r="1733">
                           <a:s>D</a:s>
                        </a:s>
                        <a:s>, </a:s>
                        <a:s r="1734">
                           <a:s>ObsList</a:s>
                        </a:s>
                        <a:s>)</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1644" locator="341:3-344:37" xsi:type="If">
            <condition localId="1645" locator="341:6-341:41" xsi:type="Equivalent">
               <signature localId="1654" name="t:Concept" xsi:type="NamedTypeSpecifier"/>
               <signature localId="1655" name="t:Concept" xsi:type="NamedTypeSpecifier"/>
               <operand localId="1649" locator="341:6-341:34" name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand localId="1648" locator="341:28-341:33" path="code" xsi:type="Property">
                     <source localId="1647" locator="341:28" name="D" xsi:type="OperandRef"/>
                  </operand>
               </operand>
               <operand localId="1652" xsi:type="ToConcept">
                  <signature localId="1653" name="t:Code" xsi:type="NamedTypeSpecifier"/>
                  <operand localId="1650" locator="341:38-341:41" name="code" xsi:type="OperandRef"/>
               </operand>
            </condition>
            <then localId="1664" locator="342:5-342:38" name="CollateConclusionCodes" xsi:type="FunctionRef">
               <operand localId="1656" locator="342:28" name="D" xsi:type="OperandRef"/>
               <operand localId="1657" locator="342:31-342:37" name="ObsList" xsi:type="OperandRef"/>
            </then>
            <else localId="1735" locator="344:5-344:37" name="ValuesFromObservation" xsi:type="FunctionRef">
               <operand localId="1733" locator="344:27" name="D" xsi:type="OperandRef"/>
               <operand localId="1734" locator="344:30-344:36" name="ObsList" xsi:type="OperandRef"/>
            </else>
         </expression>
         <operand localId="1638" name="D">
            <operandTypeSpecifier localId="1637" locator="340:42-340:57" name="fhir:DiagnosticReport" xsi:type="NamedTypeSpecifier"/>
         </operand>
         <operand localId="1641" name="ObsList">
            <operandTypeSpecifier localId="1639" locator="340:68-340:84" xsi:type="ListTypeSpecifier">
               <elementType localId="1640" locator="340:73-340:83" name="fhir:Observation" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
         <operand localId="1643" name="code">
            <operandTypeSpecifier localId="1642" locator="340:92-340:102" name="t:Code" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def localId="1658" locator="346:1-348:35" name="CollateConclusionCodes" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1658">
               <a:s>define function CollateConclusionCodes(D DiagnosticReport, ObsList List&lt;Observation>):
  </a:s>
               <a:s r="1741">
                  <a:s r="1741">
                     <a:s r="1737">
                        <a:s r="1736">
                           <a:s>D</a:s>
                        </a:s>
                        <a:s>.</a:s>
                        <a:s r="1737">
                           <a:s>conclusionCode</a:s>
                        </a:s>
                     </a:s>
                     <a:s> union
  </a:s>
                     <a:s r="1740">
                        <a:s>ValuesFromObservation(</a:s>
                        <a:s r="1738">
                           <a:s>D</a:s>
                        </a:s>
                        <a:s>, </a:s>
                        <a:s r="1739">
                           <a:s>ObsList</a:s>
                        </a:s>
                        <a:s>)</a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1741" locator="347:3-348:35" xsi:type="Union">
            <operand localId="1737" locator="347:3-347:18" path="conclusionCode" xsi:type="Property">
               <source localId="1736" locator="347:3" name="D" xsi:type="OperandRef"/>
            </operand>
            <operand localId="1740" locator="348:3-348:35" name="ValuesFromObservation" xsi:type="FunctionRef">
               <operand localId="1738" locator="348:25" name="D" xsi:type="OperandRef"/>
               <operand localId="1739" locator="348:28-348:34" name="ObsList" xsi:type="OperandRef"/>
            </operand>
         </expression>
         <operand localId="1660" name="D">
            <operandTypeSpecifier localId="1659" locator="346:42-346:57" name="fhir:DiagnosticReport" xsi:type="NamedTypeSpecifier"/>
         </operand>
         <operand localId="1663" name="ObsList">
            <operandTypeSpecifier localId="1661" locator="346:68-346:84" xsi:type="ListTypeSpecifier">
               <elementType localId="1662" locator="346:73-346:83" name="fhir:Observation" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="1669" locator="350:1-355:40" name="ValuesFromObservation" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1669">
               <a:s>define function ValuesFromObservation(D DiagnosticReport, ObsList List&lt;Observation>):
  </a:s>
               <a:s r="1797">
                  <a:s r="1797">
                     <a:s>
                        <a:s r="1742">
                           <a:s r="1743">
                              <a:s>(</a:s>
                              <a:s r="1743">
                                 <a:s>ObsList</a:s>
                              </a:s>
                              <a:s>)</a:s>
                           </a:s>
                           <a:s> O</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
  </a:s>
                     <a:s r="1744">
                        <a:s>where
    </a:s>
                        <a:s r="1744">
                           <a:s r="1771">
                              <a:s>Exists( </a:s>
                              <a:s r="1768">
                                 <a:s>
                                    <a:s r="1745">
                                       <a:s r="1747">
                                          <a:s>(</a:s>
                                          <a:s r="1747">
                                             <a:s r="1746">
                                                <a:s>D</a:s>
                                             </a:s>
                                             <a:s>.</a:s>
                                             <a:s r="1747">
                                                <a:s>result</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s> )</a:s>
                                       </a:s>
                                       <a:s> R</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> </a:s>
                                 <a:s r="1748">
                                    <a:s>where </a:s>
                                    <a:s r="1748">
                                       <a:s r="1761">
                                          <a:s>Last(</a:s>
                                          <a:s r="1756">
                                             <a:s>Split(</a:s>
                                             <a:s r="1750">
                                                <a:s r="1749">
                                                   <a:s>R</a:s>
                                                </a:s>
                                                <a:s>.</a:s>
                                                <a:s r="1750">
                                                   <a:s>reference</a:s>
                                                </a:s>
                                             </a:s>
                                             <a:s>,</a:s>
                                             <a:s r="1751">
                                                <a:s>'/'</a:s>
                                             </a:s>
                                             <a:s>)</a:s>
                                          </a:s>
                                          <a:s>)</a:s>
                                       </a:s>
                                       <a:s> =  </a:s>
                                       <a:s r="1763">
                                          <a:s r="1762">
                                             <a:s>O</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="1763">
                                             <a:s>id</a:s>
                                          </a:s>
                                       </a:s>
                                    </a:s>
                                 </a:s>
                              </a:s>
                              <a:s> )</a:s>
                           </a:s>
                           <a:s> or
    </a:s>
                           <a:s r="1791">
                              <a:s>Exists( </a:s>
                              <a:s r="1788">
                                 <a:s>
                                    <a:s r="1772">
                                       <a:s r="1774">
                                          <a:s>(</a:s>
                                          <a:s r="1774">
                                             <a:s r="1773">
                                                <a:s>O</a:s>
                                             </a:s>
                                             <a:s>.</a:s>
                                             <a:s r="1774">
                                                <a:s>basedOn</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s>)</a:s>
                                       </a:s>
                                       <a:s> oB</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> </a:s>
                                 <a:s r="1787">
                                    <a:s>where </a:s>
                                    <a:s r="1787">
                                       <a:s>AnyTrue(</a:s>
                                       <a:s r="1784">
                                          <a:s>
                                             <a:s r="1775">
                                                <a:s r="1777">
                                                   <a:s>(</a:s>
                                                   <a:s r="1777">
                                                      <a:s r="1776">
                                                         <a:s>D</a:s>
                                                      </a:s>
                                                      <a:s>.</a:s>
                                                      <a:s r="1777">
                                                         <a:s>basedOn</a:s>
                                                      </a:s>
                                                   </a:s>
                                                   <a:s>)</a:s>
                                                </a:s>
                                                <a:s> dB</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s> </a:s>
                                          <a:s r="1778">
                                             <a:s>return </a:s>
                                             <a:s r="1779">
                                                <a:s r="1780">
                                                   <a:s>dB</a:s>
                                                </a:s>
                                                <a:s> = </a:s>
                                                <a:s r="1781">
                                                   <a:s>oB</a:s>
                                                </a:s>
                                             </a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s> )</a:s>
                                    </a:s>
                                 </a:s>
                              </a:s>
                              <a:s> )</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s>
  </a:s>
                     <a:s r="1792">
                        <a:s>return </a:s>
                        <a:s r="1793">
                           <a:s r="1795">
                              <a:s r="1794">
                                 <a:s>O</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="1795">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s> as </a:s>
                           <a:s r="1796">
                              <a:s>FHIR.CodeableConcept</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1797" locator="351:3-355:40" xsi:type="Query">
            <source localId="1742" locator="351:3-351:13" alias="O">
               <expression localId="1743" locator="351:3-351:11" name="ObsList" xsi:type="OperandRef"/>
            </source>
            <where localId="1744" locator="352:3-354:74" xsi:type="Or">
               <operand localId="1771" locator="353:5-353:70" xsi:type="Exists">
                  <operand localId="1768" locator="353:13-353:68" xsi:type="Query">
                     <source localId="1745" locator="353:13-353:25" alias="R">
                        <expression localId="1747" locator="353:13-353:23" path="result" xsi:type="Property">
                           <source localId="1746" locator="353:14" name="D" xsi:type="OperandRef"/>
                        </expression>
                     </source>
                     <where localId="1748" locator="353:27-353:68" xsi:type="Equal">
                        <signature localId="1766" name="t:String" xsi:type="NamedTypeSpecifier"/>
                        <signature localId="1767" name="t:String" xsi:type="NamedTypeSpecifier"/>
                        <operand localId="1761" locator="353:33-353:60" xsi:type="Last">
                           <source localId="1756" locator="353:38-353:59" xsi:type="Split">
                              <stringToSplit localId="1757" name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <signature localId="1758" name="fhir:string" xsi:type="NamedTypeSpecifier"/>
                                 <operand localId="1750" locator="353:44-353:54" path="reference" scope="R" xsi:type="Property"/>
                              </stringToSplit>
                              <separator localId="1751" locator="353:56-353:58" valueType="t:String" value="/" xsi:type="Literal"/>
                           </source>
                        </operand>
                        <operand localId="1764" name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                           <signature localId="1765" name="fhir:string" xsi:type="NamedTypeSpecifier"/>
                           <operand localId="1763" locator="353:65-353:68" path="id" scope="O" xsi:type="Property"/>
                        </operand>
                     </where>
                  </operand>
               </operand>
               <operand localId="1791" locator="354:5-354:74" xsi:type="Exists">
                  <operand localId="1788" locator="354:13-354:72" xsi:type="Query">
                     <source localId="1772" locator="354:13-354:26" alias="oB">
                        <expression localId="1774" locator="354:13-354:23" path="basedOn" scope="O" xsi:type="Property"/>
                     </source>
                     <where localId="1787" locator="354:28-354:72" xsi:type="AnyTrue">
                        <source localId="1784" locator="354:42-354:70" xsi:type="Query">
                           <source localId="1775" locator="354:42-354:55" alias="dB">
                              <expression localId="1777" locator="354:42-354:52" path="basedOn" xsi:type="Property">
                                 <source localId="1776" locator="354:43" name="D" xsi:type="OperandRef"/>
                              </expression>
                           </source>
                           <return localId="1778" locator="354:57-354:70">
                              <expression localId="1779" locator="354:64-354:70" xsi:type="Equal">
                                 <signature localId="1782" name="fhir:Reference" xsi:type="NamedTypeSpecifier"/>
                                 <signature localId="1783" name="fhir:Reference" xsi:type="NamedTypeSpecifier"/>
                                 <operand localId="1780" locator="354:64-354:65" name="dB" xsi:type="AliasRef"/>
                                 <operand localId="1781" locator="354:69-354:70" name="oB" xsi:type="AliasRef"/>
                              </expression>
                           </return>
                        </source>
                     </where>
                  </operand>
               </operand>
            </where>
            <return localId="1792" locator="355:3-355:40">
               <expression localId="1793" locator="355:10-355:40" strict="false" xsi:type="As">
                  <operand localId="1795" locator="355:10-355:16" path="value" scope="O" xsi:type="Property"/>
                  <asTypeSpecifier localId="1796" locator="355:21-355:40" name="fhir:CodeableConcept" xsi:type="NamedTypeSpecifier"/>
               </expression>
            </return>
         </expression>
         <operand localId="1671" name="D">
            <operandTypeSpecifier localId="1670" locator="350:41-350:56" name="fhir:DiagnosticReport" xsi:type="NamedTypeSpecifier"/>
         </operand>
         <operand localId="1674" name="ObsList">
            <operandTypeSpecifier localId="1672" locator="350:67-350:83" xsi:type="ListTypeSpecifier">
               <elementType localId="1673" locator="350:72-350:82" name="fhir:Observation" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def localId="1798" locator="357:1-362:33" name="ValueQuantityFromObservation" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:s r="1798">
               <a:s>define function ValueQuantityFromObservation(D DiagnosticReport, ObsList List&lt;Observation>):
  </a:s>
               <a:s r="1859">
                  <a:s r="1859">
                     <a:s>
                        <a:s r="1804">
                           <a:s r="1805">
                              <a:s>(</a:s>
                              <a:s r="1805">
                                 <a:s>ObsList</a:s>
                              </a:s>
                              <a:s>)</a:s>
                           </a:s>
                           <a:s> O</a:s>
                        </a:s>
                     </a:s>
                     <a:s>
  </a:s>
                     <a:s r="1806">
                        <a:s>where
    </a:s>
                        <a:s r="1806">
                           <a:s r="1833">
                              <a:s>Exists( </a:s>
                              <a:s r="1830">
                                 <a:s>
                                    <a:s r="1807">
                                       <a:s r="1809">
                                          <a:s>(</a:s>
                                          <a:s r="1809">
                                             <a:s r="1808">
                                                <a:s>D</a:s>
                                             </a:s>
                                             <a:s>.</a:s>
                                             <a:s r="1809">
                                                <a:s>result</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s> )</a:s>
                                       </a:s>
                                       <a:s> R</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> </a:s>
                                 <a:s r="1810">
                                    <a:s>where </a:s>
                                    <a:s r="1810">
                                       <a:s r="1823">
                                          <a:s>Last(</a:s>
                                          <a:s r="1818">
                                             <a:s>Split(</a:s>
                                             <a:s r="1812">
                                                <a:s r="1811">
                                                   <a:s>R</a:s>
                                                </a:s>
                                                <a:s>.</a:s>
                                                <a:s r="1812">
                                                   <a:s>reference</a:s>
                                                </a:s>
                                             </a:s>
                                             <a:s>,</a:s>
                                             <a:s r="1813">
                                                <a:s>'/'</a:s>
                                             </a:s>
                                             <a:s>)</a:s>
                                          </a:s>
                                          <a:s>)</a:s>
                                       </a:s>
                                       <a:s> =  </a:s>
                                       <a:s r="1825">
                                          <a:s r="1824">
                                             <a:s>O</a:s>
                                          </a:s>
                                          <a:s>.</a:s>
                                          <a:s r="1825">
                                             <a:s>id</a:s>
                                          </a:s>
                                       </a:s>
                                    </a:s>
                                 </a:s>
                              </a:s>
                              <a:s> )</a:s>
                           </a:s>
                           <a:s> or
    </a:s>
                           <a:s r="1853">
                              <a:s>Exists( </a:s>
                              <a:s r="1850">
                                 <a:s>
                                    <a:s r="1834">
                                       <a:s r="1836">
                                          <a:s>(</a:s>
                                          <a:s r="1836">
                                             <a:s r="1835">
                                                <a:s>O</a:s>
                                             </a:s>
                                             <a:s>.</a:s>
                                             <a:s r="1836">
                                                <a:s>basedOn</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s>)</a:s>
                                       </a:s>
                                       <a:s> oB</a:s>
                                    </a:s>
                                 </a:s>
                                 <a:s> </a:s>
                                 <a:s r="1849">
                                    <a:s>where </a:s>
                                    <a:s r="1849">
                                       <a:s>AnyTrue(</a:s>
                                       <a:s r="1846">
                                          <a:s>
                                             <a:s r="1837">
                                                <a:s r="1839">
                                                   <a:s>(</a:s>
                                                   <a:s r="1839">
                                                      <a:s r="1838">
                                                         <a:s>D</a:s>
                                                      </a:s>
                                                      <a:s>.</a:s>
                                                      <a:s r="1839">
                                                         <a:s>basedOn</a:s>
                                                      </a:s>
                                                   </a:s>
                                                   <a:s>)</a:s>
                                                </a:s>
                                                <a:s> dB</a:s>
                                             </a:s>
                                          </a:s>
                                          <a:s> </a:s>
                                          <a:s r="1840">
                                             <a:s>return </a:s>
                                             <a:s r="1841">
                                                <a:s r="1842">
                                                   <a:s>dB</a:s>
                                                </a:s>
                                                <a:s> = </a:s>
                                                <a:s r="1843">
                                                   <a:s>oB</a:s>
                                                </a:s>
                                             </a:s>
                                          </a:s>
                                       </a:s>
                                       <a:s> )</a:s>
                                    </a:s>
                                 </a:s>
                              </a:s>
                              <a:s> )</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                     <a:s>
  </a:s>
                     <a:s r="1854">
                        <a:s>return </a:s>
                        <a:s r="1855">
                           <a:s r="1857">
                              <a:s r="1856">
                                 <a:s>O</a:s>
                              </a:s>
                              <a:s>.</a:s>
                              <a:s r="1857">
                                 <a:s>value</a:s>
                              </a:s>
                           </a:s>
                           <a:s> as </a:s>
                           <a:s r="1858">
                              <a:s>FHIR.Quantity</a:s>
                           </a:s>
                        </a:s>
                     </a:s>
                  </a:s>
               </a:s>
            </a:s>
         </annotation>
         <expression localId="1859" locator="358:3-362:33" xsi:type="Query">
            <source localId="1804" locator="358:3-358:13" alias="O">
               <expression localId="1805" locator="358:3-358:11" name="ObsList" xsi:type="OperandRef"/>
            </source>
            <where localId="1806" locator="359:3-361:74" xsi:type="Or">
               <operand localId="1833" locator="360:5-360:70" xsi:type="Exists">
                  <operand localId="1830" locator="360:13-360:68" xsi:type="Query">
                     <source localId="1807" locator="360:13-360:25" alias="R">
                        <expression localId="1809" locator="360:13-360:23" path="result" xsi:type="Property">
                           <source localId="1808" locator="360:14" name="D" xsi:type="OperandRef"/>
                        </expression>
                     </source>
                     <where localId="1810" locator="360:27-360:68" xsi:type="Equal">
                        <signature localId="1828" name="t:String" xsi:type="NamedTypeSpecifier"/>
                        <signature localId="1829" name="t:String" xsi:type="NamedTypeSpecifier"/>
                        <operand localId="1823" locator="360:33-360:60" xsi:type="Last">
                           <source localId="1818" locator="360:38-360:59" xsi:type="Split">
                              <stringToSplit localId="1819" name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <signature localId="1820" name="fhir:string" xsi:type="NamedTypeSpecifier"/>
                                 <operand localId="1812" locator="360:44-360:54" path="reference" scope="R" xsi:type="Property"/>
                              </stringToSplit>
                              <separator localId="1813" locator="360:56-360:58" valueType="t:String" value="/" xsi:type="Literal"/>
                           </source>
                        </operand>
                        <operand localId="1826" name="ToString" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                           <signature localId="1827" name="fhir:string" xsi:type="NamedTypeSpecifier"/>
                           <operand localId="1825" locator="360:65-360:68" path="id" scope="O" xsi:type="Property"/>
                        </operand>
                     </where>
                  </operand>
               </operand>
               <operand localId="1853" locator="361:5-361:74" xsi:type="Exists">
                  <operand localId="1850" locator="361:13-361:72" xsi:type="Query">
                     <source localId="1834" locator="361:13-361:26" alias="oB">
                        <expression localId="1836" locator="361:13-361:23" path="basedOn" scope="O" xsi:type="Property"/>
                     </source>
                     <where localId="1849" locator="361:28-361:72" xsi:type="AnyTrue">
                        <source localId="1846" locator="361:42-361:70" xsi:type="Query">
                           <source localId="1837" locator="361:42-361:55" alias="dB">
                              <expression localId="1839" locator="361:42-361:52" path="basedOn" xsi:type="Property">
                                 <source localId="1838" locator="361:43" name="D" xsi:type="OperandRef"/>
                              </expression>
                           </source>
                           <return localId="1840" locator="361:57-361:70">
                              <expression localId="1841" locator="361:64-361:70" xsi:type="Equal">
                                 <signature localId="1844" name="fhir:Reference" xsi:type="NamedTypeSpecifier"/>
                                 <signature localId="1845" name="fhir:Reference" xsi:type="NamedTypeSpecifier"/>
                                 <operand localId="1842" locator="361:64-361:65" name="dB" xsi:type="AliasRef"/>
                                 <operand localId="1843" locator="361:69-361:70" name="oB" xsi:type="AliasRef"/>
                              </expression>
                           </return>
                        </source>
                     </where>
                  </operand>
               </operand>
            </where>
            <return localId="1854" locator="362:3-362:33">
               <expression localId="1855" locator="362:10-362:33" strict="false" xsi:type="As">
                  <operand localId="1857" locator="362:10-362:16" path="value" scope="O" xsi:type="Property"/>
                  <asTypeSpecifier localId="1858" locator="362:21-362:33" name="fhir:Quantity" xsi:type="NamedTypeSpecifier"/>
               </expression>
            </return>
         </expression>
         <operand localId="1800" name="D">
            <operandTypeSpecifier localId="1799" locator="357:48-357:63" name="fhir:DiagnosticReport" xsi:type="NamedTypeSpecifier"/>
         </operand>
         <operand localId="1803" name="ObsList">
            <operandTypeSpecifier localId="1801" locator="357:74-357:90" xsi:type="ListTypeSpecifier">
               <elementType localId="1802" locator="357:79-357:89" name="fhir:Observation" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
   </statements>
</library>
